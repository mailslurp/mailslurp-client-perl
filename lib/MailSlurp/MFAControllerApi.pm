=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::MFAControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_totp_device_for_custom
#
# Create a TOTP device from custom options
# 
# @param CreateTotpDeviceOtpAuthUrlOptions $create_totp_device_otp_auth_url_options  (required)
{
    my $params = {
    'create_totp_device_otp_auth_url_options' => {
        data_type => 'CreateTotpDeviceOtpAuthUrlOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_totp_device_for_custom' } = { 
        summary => 'Create a TOTP device from custom options',
        params => $params,
        returns => 'TotpDeviceDto',
        };
}
# @return TotpDeviceDto
#
sub create_totp_device_for_custom {
    my ($self, %args) = @_;

    # verify the required parameter 'create_totp_device_otp_auth_url_options' is set
    unless (exists $args{'create_totp_device_otp_auth_url_options'}) {
      croak("Missing the required parameter 'create_totp_device_otp_auth_url_options' when calling create_totp_device_for_custom");
    }

    # parse inputs
    my $_resource_path = '/mfa/totp/device/custom';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_totp_device_otp_auth_url_options'}) {
        $_body_data = $args{'create_totp_device_otp_auth_url_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TotpDeviceDto', $response);
    return $_response_object;
}

#
# create_totp_device_for_otp_auth_url
#
# Create a TOTP device from an OTP Auth URL
# 
# @param CreateTotpDeviceOtpAuthUrlOptions $create_totp_device_otp_auth_url_options  (required)
{
    my $params = {
    'create_totp_device_otp_auth_url_options' => {
        data_type => 'CreateTotpDeviceOtpAuthUrlOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_totp_device_for_otp_auth_url' } = { 
        summary => 'Create a TOTP device from an OTP Auth URL',
        params => $params,
        returns => 'TotpDeviceDto',
        };
}
# @return TotpDeviceDto
#
sub create_totp_device_for_otp_auth_url {
    my ($self, %args) = @_;

    # verify the required parameter 'create_totp_device_otp_auth_url_options' is set
    unless (exists $args{'create_totp_device_otp_auth_url_options'}) {
      croak("Missing the required parameter 'create_totp_device_otp_auth_url_options' when calling create_totp_device_for_otp_auth_url");
    }

    # parse inputs
    my $_resource_path = '/mfa/totp/device/otpAuthUrl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_totp_device_otp_auth_url_options'}) {
        $_body_data = $args{'create_totp_device_otp_auth_url_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TotpDeviceDto', $response);
    return $_response_object;
}

#
# get_totp_device
#
# Get a TOTP device by ID
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_totp_device' } = { 
        summary => 'Get a TOTP device by ID',
        params => $params,
        returns => 'TotpDeviceDto',
        };
}
# @return TotpDeviceDto
#
sub get_totp_device {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_totp_device");
    }

    # parse inputs
    my $_resource_path = '/mfa/totp/device/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TotpDeviceDto', $response);
    return $_response_object;
}

#
# get_totp_device_by
#
# Get a TOTP device by username, issuer, or name. Returns empty if not found.
# 
# @param string $name Optional name filter (optional)
# @param string $issuer Optional issuer filter (optional)
# @param string $username Optional username filter (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Optional name filter',
        required => '0',
    },
    'issuer' => {
        data_type => 'string',
        description => 'Optional issuer filter',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => 'Optional username filter',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_totp_device_by' } = { 
        summary => 'Get a TOTP device by username, issuer, or name. Returns empty if not found.',
        params => $params,
        returns => 'TotpDeviceOptionalDto',
        };
}
# @return TotpDeviceOptionalDto
#
sub get_totp_device_by {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mfa/totp/device/by';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'issuer'}) {
        $query_params->{'issuer'} = $self->{api_client}->to_query_value($args{'issuer'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TotpDeviceOptionalDto', $response);
    return $_response_object;
}

#
# get_totp_device_code
#
# Get a TOTP device code by device ID
# 
# @param string $id  (required)
# @param DateTime $at  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'at' => {
        data_type => 'DateTime',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_totp_device_code' } = { 
        summary => 'Get a TOTP device code by device ID',
        params => $params,
        returns => 'TotpDeviceCodeDto',
        };
}
# @return TotpDeviceCodeDto
#
sub get_totp_device_code {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_totp_device_code");
    }

    # parse inputs
    my $_resource_path = '/mfa/totp/device/{id}/code';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'at'}) {
        $query_params->{'at'} = $self->{api_client}->to_query_value($args{'at'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TotpDeviceCodeDto', $response);
    return $_response_object;
}

1;
