=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::ConnectorControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_connector
#
# Create an inbox connector
# 
# @param CreateConnectorOptions $create_connector_options  (required)
# @param string $inbox_id Optional inbox ID to associate with the connector (optional)
{
    my $params = {
    'create_connector_options' => {
        data_type => 'CreateConnectorOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox ID to associate with the connector',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_connector' } = { 
        summary => 'Create an inbox connector',
        params => $params,
        returns => 'ConnectorDto',
        };
}
# @return ConnectorDto
#
sub create_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'create_connector_options' is set
    unless (exists $args{'create_connector_options'}) {
      croak("Missing the required parameter 'create_connector_options' when calling create_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_options'}) {
        $_body_data = $args{'create_connector_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorDto', $response);
    return $_response_object;
}

#
# create_connector_imap_connection
#
# Create an inbox connector IMAP connection
# 
# @param string $id  (required)
# @param CreateConnectorImapConnectionOptions $create_connector_imap_connection_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_imap_connection_options' => {
        data_type => 'CreateConnectorImapConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_connector_imap_connection' } = { 
        summary => 'Create an inbox connector IMAP connection',
        params => $params,
        returns => 'ConnectorImapConnectionDto',
        };
}
# @return ConnectorImapConnectionDto
#
sub create_connector_imap_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_connector_imap_connection");
    }

    # verify the required parameter 'create_connector_imap_connection_options' is set
    unless (exists $args{'create_connector_imap_connection_options'}) {
      croak("Missing the required parameter 'create_connector_imap_connection_options' when calling create_connector_imap_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/imap';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_imap_connection_options'}) {
        $_body_data = $args{'create_connector_imap_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorImapConnectionDto', $response);
    return $_response_object;
}

#
# create_connector_smtp_connection
#
# Create an inbox connector SMTP connection
# 
# @param string $id  (required)
# @param CreateConnectorSmtpConnectionOptions $create_connector_smtp_connection_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_smtp_connection_options' => {
        data_type => 'CreateConnectorSmtpConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_connector_smtp_connection' } = { 
        summary => 'Create an inbox connector SMTP connection',
        params => $params,
        returns => 'ConnectorSmtpConnectionDto',
        };
}
# @return ConnectorSmtpConnectionDto
#
sub create_connector_smtp_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_connector_smtp_connection");
    }

    # verify the required parameter 'create_connector_smtp_connection_options' is set
    unless (exists $args{'create_connector_smtp_connection_options'}) {
      croak("Missing the required parameter 'create_connector_smtp_connection_options' when calling create_connector_smtp_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/smtp';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_smtp_connection_options'}) {
        $_body_data = $args{'create_connector_smtp_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSmtpConnectionDto', $response);
    return $_response_object;
}

#
# create_connector_sync_settings
#
# Create an inbox connector sync settings
# 
# @param string $id  (required)
# @param CreateConnectorSyncSettingsOptions $create_connector_sync_settings_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_sync_settings_options' => {
        data_type => 'CreateConnectorSyncSettingsOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_connector_sync_settings' } = { 
        summary => 'Create an inbox connector sync settings',
        params => $params,
        returns => 'ConnectorSyncSettingsDto',
        };
}
# @return ConnectorSyncSettingsDto
#
sub create_connector_sync_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_connector_sync_settings");
    }

    # verify the required parameter 'create_connector_sync_settings_options' is set
    unless (exists $args{'create_connector_sync_settings_options'}) {
      croak("Missing the required parameter 'create_connector_sync_settings_options' when calling create_connector_sync_settings");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/sync-settings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_sync_settings_options'}) {
        $_body_data = $args{'create_connector_sync_settings_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSyncSettingsDto', $response);
    return $_response_object;
}

#
# create_connector_with_options
#
# Create an inbox connector with options
# 
# @param CreateConnectorWithOptions $create_connector_with_options  (required)
# @param string $inbox_id Optional inbox ID to associate with the connector (optional)
{
    my $params = {
    'create_connector_with_options' => {
        data_type => 'CreateConnectorWithOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox ID to associate with the connector',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_connector_with_options' } = { 
        summary => 'Create an inbox connector with options',
        params => $params,
        returns => 'ConnectorDto',
        };
}
# @return ConnectorDto
#
sub create_connector_with_options {
    my ($self, %args) = @_;

    # verify the required parameter 'create_connector_with_options' is set
    unless (exists $args{'create_connector_with_options'}) {
      croak("Missing the required parameter 'create_connector_with_options' when calling create_connector_with_options");
    }

    # parse inputs
    my $_resource_path = '/connectors/withOptions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_with_options'}) {
        $_body_data = $args{'create_connector_with_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorDto', $response);
    return $_response_object;
}

#
# delete_all_connector
#
# Delete all inbox connectors
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_connector' } = { 
        summary => 'Delete all inbox connectors',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_connector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/connectors';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_connector
#
# Delete an inbox connector
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_connector' } = { 
        summary => 'Delete an inbox connector',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_connector_imap_connection
#
# Delete an inbox connector IMAP connection
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_connector_imap_connection' } = { 
        summary => 'Delete an inbox connector IMAP connection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_connector_imap_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_connector_imap_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/imap';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_connector_smtp_connection
#
# Delete an inbox connector SMTP connection
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_connector_smtp_connection' } = { 
        summary => 'Delete an inbox connector SMTP connection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_connector_smtp_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_connector_smtp_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/smtp';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_connector_sync_settings
#
# Create an inbox connector sync settings
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_connector_sync_settings' } = { 
        summary => 'Create an inbox connector sync settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_connector_sync_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_connector_sync_settings");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/sync-settings';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_all_connector_events
#
# Get all inbox connector events
# 
# @param string $id Optional connector ID (optional)
# @param int $page Optional page index in connector list pagination (optional, default to 0)
# @param int $size Optional page size in connector list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $event_type Filter by event type (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Optional connector ID',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in connector list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in connector list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Filter by event type',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_connector_events' } = { 
        summary => 'Get all inbox connector events',
        params => $params,
        returns => 'PageConnectorEvents',
        };
}
# @return PageConnectorEvents
#
sub get_all_connector_events {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/connectors/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageConnectorEvents', $response);
    return $_response_object;
}

#
# get_connector
#
# Get an inbox connector
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector' } = { 
        summary => 'Get an inbox connector',
        params => $params,
        returns => 'ConnectorDto',
        };
}
# @return ConnectorDto
#
sub get_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorDto', $response);
    return $_response_object;
}

#
# get_connector_by_email_address
#
# Get connector by email address
# 
# @param string $email_address Email address to search for connector by (required)
{
    my $params = {
    'email_address' => {
        data_type => 'string',
        description => 'Email address to search for connector by',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_by_email_address' } = { 
        summary => 'Get connector by email address',
        params => $params,
        returns => 'OptionalConnectorDto',
        };
}
# @return OptionalConnectorDto
#
sub get_connector_by_email_address {
    my ($self, %args) = @_;

    # verify the required parameter 'email_address' is set
    unless (exists $args{'email_address'}) {
      croak("Missing the required parameter 'email_address' when calling get_connector_by_email_address");
    }

    # parse inputs
    my $_resource_path = '/connectors/by-email-address';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorDto', $response);
    return $_response_object;
}

#
# get_connector_by_inbox_id
#
# Get connector by inbox ID
# 
# @param string $inbox_id Inbox ID to search for connector by (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to search for connector by',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_by_inbox_id' } = { 
        summary => 'Get connector by inbox ID',
        params => $params,
        returns => 'OptionalConnectorDto',
        };
}
# @return OptionalConnectorDto
#
sub get_connector_by_inbox_id {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_connector_by_inbox_id");
    }

    # parse inputs
    my $_resource_path = '/connectors/by-inbox-id';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorDto', $response);
    return $_response_object;
}

#
# get_connector_by_name
#
# Get connector by name
# 
# @param string $name Name to search for connector by (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name to search for connector by',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_by_name' } = { 
        summary => 'Get connector by name',
        params => $params,
        returns => 'OptionalConnectorDto',
        };
}
# @return OptionalConnectorDto
#
sub get_connector_by_name {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_connector_by_name");
    }

    # parse inputs
    my $_resource_path = '/connectors/by-name';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorDto', $response);
    return $_response_object;
}

#
# get_connector_event
#
# Get an inbox connector event
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_event' } = { 
        summary => 'Get an inbox connector event',
        params => $params,
        returns => 'ConnectorEventDto',
        };
}
# @return ConnectorEventDto
#
sub get_connector_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector_event");
    }

    # parse inputs
    my $_resource_path = '/connectors/events/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorEventDto', $response);
    return $_response_object;
}

#
# get_connector_events
#
# Get an inbox connector events
# 
# @param string $id  (required)
# @param int $page Optional page index in connector list pagination (optional, default to 0)
# @param int $size Optional page size in connector list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $event_type Filter by event type (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in connector list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in connector list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Filter by event type',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_events' } = { 
        summary => 'Get an inbox connector events',
        params => $params,
        returns => 'PageConnectorEvents',
        };
}
# @return PageConnectorEvents
#
sub get_connector_events {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector_events");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageConnectorEvents', $response);
    return $_response_object;
}

#
# get_connector_imap_connection
#
# Get an inbox connector IMAP connection
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_imap_connection' } = { 
        summary => 'Get an inbox connector IMAP connection',
        params => $params,
        returns => 'OptionalConnectorImapConnectionDto',
        };
}
# @return OptionalConnectorImapConnectionDto
#
sub get_connector_imap_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector_imap_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/imap';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorImapConnectionDto', $response);
    return $_response_object;
}

#
# get_connector_provider_settings
#
# Get SMTP and IMAP connection settings for common mail providers
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_connector_provider_settings' } = { 
        summary => 'Get SMTP and IMAP connection settings for common mail providers',
        params => $params,
        returns => 'ConnectorProviderSettingsDto',
        };
}
# @return ConnectorProviderSettingsDto
#
sub get_connector_provider_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/connectors/provider-settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorProviderSettingsDto', $response);
    return $_response_object;
}

#
# get_connector_smtp_connection
#
# Get an inbox connector SMTP connection
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_smtp_connection' } = { 
        summary => 'Get an inbox connector SMTP connection',
        params => $params,
        returns => 'OptionalConnectorSmtpConnectionDto',
        };
}
# @return OptionalConnectorSmtpConnectionDto
#
sub get_connector_smtp_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector_smtp_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/smtp';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorSmtpConnectionDto', $response);
    return $_response_object;
}

#
# get_connector_sync_settings
#
# Get an inbox connector sync settings
# 
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connector_sync_settings' } = { 
        summary => 'Get an inbox connector sync settings',
        params => $params,
        returns => 'OptionalConnectorSyncSettingsDto',
        };
}
# @return OptionalConnectorSyncSettingsDto
#
sub get_connector_sync_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_connector_sync_settings");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/sync-settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptionalConnectorSyncSettingsDto', $response);
    return $_response_object;
}

#
# get_connectors
#
# Get inbox connectors
# 
# @param int $page Optional page index in connector list pagination (optional, default to 0)
# @param int $size Optional page size in connector list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in connector list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in connector list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_connectors' } = { 
        summary => 'Get inbox connectors',
        params => $params,
        returns => 'PageConnector',
        };
}
# @return PageConnector
#
sub get_connectors {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/connectors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageConnector', $response);
    return $_response_object;
}

#
# send_email_from_connector
#
# Send from an inbox connector
# 
# @param string $id  (required)
# @param SendEmailOptions $send_email_options  (required)
# @param boolean $use_fallback  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'send_email_options' => {
        data_type => 'SendEmailOptions',
        description => '',
        required => '1',
    },
    'use_fallback' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email_from_connector' } = { 
        summary => 'Send from an inbox connector',
        params => $params,
        returns => 'SentEmailDto',
        };
}
# @return SentEmailDto
#
sub send_email_from_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling send_email_from_connector");
    }

    # verify the required parameter 'send_email_options' is set
    unless (exists $args{'send_email_options'}) {
      croak("Missing the required parameter 'send_email_options' when calling send_email_from_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'use_fallback'}) {
        $query_params->{'useFallback'} = $self->{api_client}->to_query_value($args{'use_fallback'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_email_options'}) {
        $_body_data = $args{'send_email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SentEmailDto', $response);
    return $_response_object;
}

#
# sync_connector
#
# Sync an inbox connector
# 
# @param string $id  (required)
# @param DateTime $since Date to request emails since (optional)
# @param string $folder Which folder to sync emails with (optional)
# @param boolean $logging Enable or disable logging for the sync operation (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Date to request emails since',
        required => '0',
    },
    'folder' => {
        data_type => 'string',
        description => 'Which folder to sync emails with',
        required => '0',
    },
    'logging' => {
        data_type => 'boolean',
        description => 'Enable or disable logging for the sync operation',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_connector' } = { 
        summary => 'Sync an inbox connector',
        params => $params,
        returns => 'ConnectorSyncRequestResult',
        };
}
# @return ConnectorSyncRequestResult
#
sub sync_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sync_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/sync';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'folder'}) {
        $query_params->{'folder'} = $self->{api_client}->to_query_value($args{'folder'});
    }

    # query params
    if ( exists $args{'logging'}) {
        $query_params->{'logging'} = $self->{api_client}->to_query_value($args{'logging'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSyncRequestResult', $response);
    return $_response_object;
}

#
# test_connector_imap_connection
#
# Test an inbox connector IMAP connection
# 
# @param string $id  (required)
# @param CreateConnectorImapConnectionOptions $create_connector_imap_connection_options  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_imap_connection_options' => {
        data_type => 'CreateConnectorImapConnectionOptions',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_connector_imap_connection' } = { 
        summary => 'Test an inbox connector IMAP connection',
        params => $params,
        returns => 'ConnectorImapConnectionTestResult',
        };
}
# @return ConnectorImapConnectionTestResult
#
sub test_connector_imap_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling test_connector_imap_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/imap/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_imap_connection_options'}) {
        $_body_data = $args{'create_connector_imap_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorImapConnectionTestResult', $response);
    return $_response_object;
}

#
# test_connector_imap_connection_options
#
# Test an inbox connector IMAP connection options
# 
# @param CreateConnectorImapConnectionOptions $create_connector_imap_connection_options  (required)
{
    my $params = {
    'create_connector_imap_connection_options' => {
        data_type => 'CreateConnectorImapConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_connector_imap_connection_options' } = { 
        summary => 'Test an inbox connector IMAP connection options',
        params => $params,
        returns => 'ConnectorImapConnectionTestResult',
        };
}
# @return ConnectorImapConnectionTestResult
#
sub test_connector_imap_connection_options {
    my ($self, %args) = @_;

    # verify the required parameter 'create_connector_imap_connection_options' is set
    unless (exists $args{'create_connector_imap_connection_options'}) {
      croak("Missing the required parameter 'create_connector_imap_connection_options' when calling test_connector_imap_connection_options");
    }

    # parse inputs
    my $_resource_path = '/connectors/connections/imap/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_imap_connection_options'}) {
        $_body_data = $args{'create_connector_imap_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorImapConnectionTestResult', $response);
    return $_response_object;
}

#
# test_connector_smtp_connection
#
# Test an inbox connector SMTP connection
# 
# @param string $id  (required)
# @param CreateConnectorSmtpConnectionOptions $create_connector_smtp_connection_options  (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_smtp_connection_options' => {
        data_type => 'CreateConnectorSmtpConnectionOptions',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_connector_smtp_connection' } = { 
        summary => 'Test an inbox connector SMTP connection',
        params => $params,
        returns => 'ConnectorSmtpConnectionTestResult',
        };
}
# @return ConnectorSmtpConnectionTestResult
#
sub test_connector_smtp_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling test_connector_smtp_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/smtp/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_smtp_connection_options'}) {
        $_body_data = $args{'create_connector_smtp_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSmtpConnectionTestResult', $response);
    return $_response_object;
}

#
# test_connector_smtp_connection_options
#
# Test an inbox connector SMTP connection options
# 
# @param CreateConnectorSmtpConnectionOptions $create_connector_smtp_connection_options  (required)
{
    my $params = {
    'create_connector_smtp_connection_options' => {
        data_type => 'CreateConnectorSmtpConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_connector_smtp_connection_options' } = { 
        summary => 'Test an inbox connector SMTP connection options',
        params => $params,
        returns => 'ConnectorSmtpConnectionTestResult',
        };
}
# @return ConnectorSmtpConnectionTestResult
#
sub test_connector_smtp_connection_options {
    my ($self, %args) = @_;

    # verify the required parameter 'create_connector_smtp_connection_options' is set
    unless (exists $args{'create_connector_smtp_connection_options'}) {
      croak("Missing the required parameter 'create_connector_smtp_connection_options' when calling test_connector_smtp_connection_options");
    }

    # parse inputs
    my $_resource_path = '/connectors/connections/smtp/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_smtp_connection_options'}) {
        $_body_data = $args{'create_connector_smtp_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSmtpConnectionTestResult', $response);
    return $_response_object;
}

#
# update_connector
#
# Update an inbox connector
# 
# @param string $id  (required)
# @param CreateConnectorOptions $create_connector_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_options' => {
        data_type => 'CreateConnectorOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_connector' } = { 
        summary => 'Update an inbox connector',
        params => $params,
        returns => 'ConnectorDto',
        };
}
# @return ConnectorDto
#
sub update_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_connector");
    }

    # verify the required parameter 'create_connector_options' is set
    unless (exists $args{'create_connector_options'}) {
      croak("Missing the required parameter 'create_connector_options' when calling update_connector");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_options'}) {
        $_body_data = $args{'create_connector_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorDto', $response);
    return $_response_object;
}

#
# update_connector_imap_connection
#
# Update an inbox connector IMAP connection
# 
# @param string $id  (required)
# @param CreateConnectorImapConnectionOptions $create_connector_imap_connection_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_imap_connection_options' => {
        data_type => 'CreateConnectorImapConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_connector_imap_connection' } = { 
        summary => 'Update an inbox connector IMAP connection',
        params => $params,
        returns => 'ConnectorImapConnectionDto',
        };
}
# @return ConnectorImapConnectionDto
#
sub update_connector_imap_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_connector_imap_connection");
    }

    # verify the required parameter 'create_connector_imap_connection_options' is set
    unless (exists $args{'create_connector_imap_connection_options'}) {
      croak("Missing the required parameter 'create_connector_imap_connection_options' when calling update_connector_imap_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/imap';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_imap_connection_options'}) {
        $_body_data = $args{'create_connector_imap_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorImapConnectionDto', $response);
    return $_response_object;
}

#
# update_connector_smtp_connection
#
# Update an inbox connector SMTP connection
# 
# @param string $id  (required)
# @param CreateConnectorSmtpConnectionOptions $create_connector_smtp_connection_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_connector_smtp_connection_options' => {
        data_type => 'CreateConnectorSmtpConnectionOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_connector_smtp_connection' } = { 
        summary => 'Update an inbox connector SMTP connection',
        params => $params,
        returns => 'ConnectorSmtpConnectionDto',
        };
}
# @return ConnectorSmtpConnectionDto
#
sub update_connector_smtp_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_connector_smtp_connection");
    }

    # verify the required parameter 'create_connector_smtp_connection_options' is set
    unless (exists $args{'create_connector_smtp_connection_options'}) {
      croak("Missing the required parameter 'create_connector_smtp_connection_options' when calling update_connector_smtp_connection");
    }

    # parse inputs
    my $_resource_path = '/connectors/{id}/smtp';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_connector_smtp_connection_options'}) {
        $_body_data = $args{'create_connector_smtp_connection_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorSmtpConnectionDto', $response);
    return $_response_object;
}

1;
