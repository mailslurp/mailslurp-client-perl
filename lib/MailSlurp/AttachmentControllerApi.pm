=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::AttachmentControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# upload_attachment
#
# Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
# 
# @param UploadAttachmentOptions $upload_options uploadOptions (required)
{
    my $params = {
    'upload_options' => {
        data_type => 'UploadAttachmentOptions',
        description => 'uploadOptions',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_attachment' } = { 
        summary => 'Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub upload_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_options' is set
    unless (exists $args{'upload_options'}) {
      croak("Missing the required parameter 'upload_options' when calling upload_attachment");
    }

    # parse inputs
    my $_resource_path = '/attachments';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'upload_options'}) {
        $_body_data = $args{'upload_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# upload_attachment_bytes
#
# Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
# 
# @param string $string Optional contentType for file. For instance &#x60;application/pdf&#x60; (optional)
# @param string $filename Optional filename to save upload with (optional)
# @param string $byte_array Byte array request body (optional)
{
    my $params = {
    'string' => {
        data_type => 'string',
        description => 'Optional contentType for file. For instance &#x60;application/pdf&#x60;',
        required => '0',
    },
    'filename' => {
        data_type => 'string',
        description => 'Optional filename to save upload with',
        required => '0',
    },
    'byte_array' => {
        data_type => 'string',
        description => 'Byte array request body',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_attachment_bytes' } = { 
        summary => 'Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub upload_attachment_bytes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attachments/bytes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/octet-stream');

    # query params
    if ( exists $args{'string'}) {
        $query_params->{'String'} = $self->{api_client}->to_query_value($args{'string'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'byte_array'}) {
        $_body_data = $args{'byte_array'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# upload_multipart_form
#
# Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
# 
# @param string $file file (required)
# @param string $content_type Optional content type of attachment (optional)
# @param string $filename Optional name of file (optional)
# @param string $x_filename Optional content type header of attachment (optional)
{
    my $params = {
    'file' => {
        data_type => 'string',
        description => 'file',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Optional content type of attachment',
        required => '0',
    },
    'filename' => {
        data_type => 'string',
        description => 'Optional name of file',
        required => '0',
    },
    'x_filename' => {
        data_type => 'string',
        description => 'Optional content type header of attachment',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_multipart_form' } = { 
        summary => 'Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub upload_multipart_form {
    my ($self, %args) = @_;

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling upload_multipart_form");
    }

    # parse inputs
    my $_resource_path = '/attachments/multipart';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'content_type'}) {
        $query_params->{'contentType'} = $self->{api_client}->to_query_value($args{'content_type'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    # query params
    if ( exists $args{'x_filename'}) {
        $query_params->{'x-filename'} = $self->{api_client}->to_query_value($args{'x_filename'});
    }

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

1;
