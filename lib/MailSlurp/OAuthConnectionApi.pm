=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::OAuthConnectionApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_o_auth_connection
#
# Create an OAuth connection
# 
# @param string $redirect_base  (required)
# @param string $o_auth_connection_type  (required)
# @param string $email_address  (optional)
{
    my $params = {
    'redirect_base' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'o_auth_connection_type' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'email_address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_o_auth_connection' } = { 
        summary => 'Create an OAuth connection',
        params => $params,
        returns => 'CreateOAuthConnectionResult',
        };
}
# @return CreateOAuthConnectionResult
#
sub create_o_auth_connection {
    my ($self, %args) = @_;

    # verify the required parameter 'redirect_base' is set
    unless (exists $args{'redirect_base'}) {
      croak("Missing the required parameter 'redirect_base' when calling create_o_auth_connection");
    }

    # verify the required parameter 'o_auth_connection_type' is set
    unless (exists $args{'o_auth_connection_type'}) {
      croak("Missing the required parameter 'o_auth_connection_type' when calling create_o_auth_connection");
    }

    # parse inputs
    my $_resource_path = '/oauth-connection';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'redirect_base'}) {
        $query_params->{'redirectBase'} = $self->{api_client}->to_query_value($args{'redirect_base'});
    }

    # query params
    if ( exists $args{'o_auth_connection_type'}) {
        $query_params->{'oAuthConnectionType'} = $self->{api_client}->to_query_value($args{'o_auth_connection_type'});
    }

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateOAuthConnectionResult', $response);
    return $_response_object;
}

#
# exchange_authorization_token_and_create_or_update_inbox
#
# Exchange authorization code for access token and create inbox
# 
# @param string $authorization_code  (required)
# @param string $redirect_uri  (required)
{
    my $params = {
    'authorization_code' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'redirect_uri' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'exchange_authorization_token_and_create_or_update_inbox' } = { 
        summary => 'Exchange authorization code for access token and create inbox',
        params => $params,
        returns => 'CreateOAuthExchangeResult',
        };
}
# @return CreateOAuthExchangeResult
#
sub exchange_authorization_token_and_create_or_update_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization_code' is set
    unless (exists $args{'authorization_code'}) {
      croak("Missing the required parameter 'authorization_code' when calling exchange_authorization_token_and_create_or_update_inbox");
    }

    # verify the required parameter 'redirect_uri' is set
    unless (exists $args{'redirect_uri'}) {
      croak("Missing the required parameter 'redirect_uri' when calling exchange_authorization_token_and_create_or_update_inbox");
    }

    # parse inputs
    my $_resource_path = '/oauth-connection/oauth-exchange/google';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'authorization_code'}) {
        $query_params->{'authorizationCode'} = $self->{api_client}->to_query_value($args{'authorization_code'});
    }

    # query params
    if ( exists $args{'redirect_uri'}) {
        $query_params->{'redirectUri'} = $self->{api_client}->to_query_value($args{'redirect_uri'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateOAuthExchangeResult', $response);
    return $_response_object;
}

1;
