=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::WebhookControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_account_webhook
#
# Attach a WebHook URL to an inbox
# 
# @param CreateWebhookOptions $create_webhook_options  (required)
{
    my $params = {
    'create_webhook_options' => {
        data_type => 'CreateWebhookOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_account_webhook' } = { 
        summary => 'Attach a WebHook URL to an inbox',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub create_account_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'create_webhook_options' is set
    unless (exists $args{'create_webhook_options'}) {
      croak("Missing the required parameter 'create_webhook_options' when calling create_account_webhook");
    }

    # parse inputs
    my $_resource_path = '/webhooks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_webhook_options'}) {
        $_body_data = $args{'create_webhook_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# create_webhook
#
# Attach a WebHook URL to an inbox
# 
# @param string $inbox_id  (required)
# @param CreateWebhookOptions $create_webhook_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_webhook_options' => {
        data_type => 'CreateWebhookOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_webhook' } = { 
        summary => 'Attach a WebHook URL to an inbox',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub create_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling create_webhook");
    }

    # verify the required parameter 'create_webhook_options' is set
    unless (exists $args{'create_webhook_options'}) {
      croak("Missing the required parameter 'create_webhook_options' when calling create_webhook");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/webhooks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_webhook_options'}) {
        $_body_data = $args{'create_webhook_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# create_webhook_for_phone_number
#
# Attach a WebHook URL to a phone number
# 
# @param string $phone_number_id  (required)
# @param CreateWebhookOptions $create_webhook_options  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_webhook_options' => {
        data_type => 'CreateWebhookOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_webhook_for_phone_number' } = { 
        summary => 'Attach a WebHook URL to a phone number',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub create_webhook_for_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling create_webhook_for_phone_number");
    }

    # verify the required parameter 'create_webhook_options' is set
    unless (exists $args{'create_webhook_options'}) {
      croak("Missing the required parameter 'create_webhook_options' when calling create_webhook_for_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/webhooks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_webhook_options'}) {
        $_body_data = $args{'create_webhook_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# delete_all_webhooks
#
# Delete all webhooks
# 
# @param DateTime $before before (optional)
{
    my $params = {
    'before' => {
        data_type => 'DateTime',
        description => 'before',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_all_webhooks' } = { 
        summary => 'Delete all webhooks',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_webhooks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_webhook
#
# Delete and disable a Webhook for an Inbox
# 
# @param string $inbox_id  (required)
# @param string $webhook_id  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_webhook' } = { 
        summary => 'Delete and disable a Webhook for an Inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling delete_webhook");
    }

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling delete_webhook");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/webhooks/{webhookId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_webhook_by_id
#
# Delete a webhook
# 
# @param string $webhook_id  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_webhook_by_id' } = { 
        summary => 'Delete a webhook',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_webhook_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling delete_webhook_by_id");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_all_account_webhooks
#
# List account webhooks Paginated
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size for paginated result list. (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'DESC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $event_type Optional event type (optional)
# @param string $health Filter by webhook health (optional)
# @param string $search_filter Optional search filter (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size for paginated result list.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Optional event type',
        required => '0',
    },
    'health' => {
        data_type => 'string',
        description => 'Filter by webhook health',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_account_webhooks' } = { 
        summary => 'List account webhooks Paginated',
        params => $params,
        returns => 'PageWebhookProjection',
        };
}
# @return PageWebhookProjection
#
sub get_all_account_webhooks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/account/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    # query params
    if ( exists $args{'health'}) {
        $query_params->{'health'} = $self->{api_client}->to_query_value($args{'health'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookProjection', $response);
    return $_response_object;
}

#
# get_all_webhook_endpoints
#
# List Webhooks endpoints Paginated
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size for paginated result list. (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'DESC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param string $inbox_id Filter by inboxId (optional)
# @param string $phone_id Filter by phoneId (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $health Filter by webhook health (optional)
# @param string $event_type Optional event type (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size for paginated result list.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Filter by inboxId',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Filter by phoneId',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'health' => {
        data_type => 'string',
        description => 'Filter by webhook health',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Optional event type',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_webhook_endpoints' } = { 
        summary => 'List Webhooks endpoints Paginated',
        params => $params,
        returns => 'PageWebhookEndpointProjection',
        };
}
# @return PageWebhookEndpointProjection
#
sub get_all_webhook_endpoints {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/endpoints';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'health'}) {
        $query_params->{'health'} = $self->{api_client}->to_query_value($args{'health'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookEndpointProjection', $response);
    return $_response_object;
}

#
# get_all_webhook_results
#
# Get results for all webhooks
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param boolean $unseen_only Filter for unseen exceptions only (optional)
# @param string $result_type Filter by result type (optional)
# @param string $event_name Filter by event name (optional)
# @param int $min_status_code Minimum response status (optional)
# @param int $max_status_code Maximum response status (optional)
# @param string $inbox_id Inbox ID (optional)
# @param string $sms_id Sms ID (optional)
# @param string $attachment_id Attachment ID (optional)
# @param string $email_id Email ID (optional)
# @param string $phone_id Phone ID (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'unseen_only' => {
        data_type => 'boolean',
        description => 'Filter for unseen exceptions only',
        required => '0',
    },
    'result_type' => {
        data_type => 'string',
        description => 'Filter by result type',
        required => '0',
    },
    'event_name' => {
        data_type => 'string',
        description => 'Filter by event name',
        required => '0',
    },
    'min_status_code' => {
        data_type => 'int',
        description => 'Minimum response status',
        required => '0',
    },
    'max_status_code' => {
        data_type => 'int',
        description => 'Maximum response status',
        required => '0',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID',
        required => '0',
    },
    'sms_id' => {
        data_type => 'string',
        description => 'Sms ID',
        required => '0',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'Attachment ID',
        required => '0',
    },
    'email_id' => {
        data_type => 'string',
        description => 'Email ID',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Phone ID',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_webhook_results' } = { 
        summary => 'Get results for all webhooks',
        params => $params,
        returns => 'PageWebhookResult',
        };
}
# @return PageWebhookResult
#
sub get_all_webhook_results {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'unseen_only'}) {
        $query_params->{'unseenOnly'} = $self->{api_client}->to_query_value($args{'unseen_only'});
    }

    # query params
    if ( exists $args{'result_type'}) {
        $query_params->{'resultType'} = $self->{api_client}->to_query_value($args{'result_type'});
    }

    # query params
    if ( exists $args{'event_name'}) {
        $query_params->{'eventName'} = $self->{api_client}->to_query_value($args{'event_name'});
    }

    # query params
    if ( exists $args{'min_status_code'}) {
        $query_params->{'minStatusCode'} = $self->{api_client}->to_query_value($args{'min_status_code'});
    }

    # query params
    if ( exists $args{'max_status_code'}) {
        $query_params->{'maxStatusCode'} = $self->{api_client}->to_query_value($args{'max_status_code'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'sms_id'}) {
        $query_params->{'smsId'} = $self->{api_client}->to_query_value($args{'sms_id'});
    }

    # query params
    if ( exists $args{'attachment_id'}) {
        $query_params->{'attachmentId'} = $self->{api_client}->to_query_value($args{'attachment_id'});
    }

    # query params
    if ( exists $args{'email_id'}) {
        $query_params->{'emailId'} = $self->{api_client}->to_query_value($args{'email_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookResult', $response);
    return $_response_object;
}

#
# get_all_webhooks
#
# List Webhooks Paginated
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size for paginated result list. (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'DESC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param string $inbox_id Filter by inboxId (optional)
# @param string $phone_id Filter by phoneId (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $health Filter by webhook health (optional)
# @param string $event_type Optional event type (optional)
# @param string $url Optional url endpoint filter (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size for paginated result list.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Filter by inboxId',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Filter by phoneId',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'health' => {
        data_type => 'string',
        description => 'Filter by webhook health',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Optional event type',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Optional url endpoint filter',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_webhooks' } = { 
        summary => 'List Webhooks Paginated',
        params => $params,
        returns => 'PageWebhookProjection',
        };
}
# @return PageWebhookProjection
#
sub get_all_webhooks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'health'}) {
        $query_params->{'health'} = $self->{api_client}->to_query_value($args{'health'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookProjection', $response);
    return $_response_object;
}

#
# get_inbox_webhooks_paginated
#
# Get paginated webhooks for an Inbox
# 
# @param string $inbox_id  (required)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $health Filter by webhook health (optional)
# @param string $event_type Optional event type (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'health' => {
        data_type => 'string',
        description => 'Filter by webhook health',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Optional event type',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_webhooks_paginated' } = { 
        summary => 'Get paginated webhooks for an Inbox',
        params => $params,
        returns => 'PageWebhookProjection',
        };
}
# @return PageWebhookProjection
#
sub get_inbox_webhooks_paginated {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox_webhooks_paginated");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/webhooks/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'health'}) {
        $query_params->{'health'} = $self->{api_client}->to_query_value($args{'health'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookProjection', $response);
    return $_response_object;
}

#
# get_json_schema_for_webhook_event
#
# 
# 
# @param string $event  (required)
{
    my $params = {
    'event' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_json_schema_for_webhook_event' } = { 
        summary => '',
        params => $params,
        returns => 'JSONSchemaDto',
        };
}
# @return JSONSchemaDto
#
sub get_json_schema_for_webhook_event {
    my ($self, %args) = @_;

    # verify the required parameter 'event' is set
    unless (exists $args{'event'}) {
      croak("Missing the required parameter 'event' when calling get_json_schema_for_webhook_event");
    }

    # parse inputs
    my $_resource_path = '/webhooks/schema';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event'}) {
        $query_params->{'event'} = $self->{api_client}->to_query_value($args{'event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JSONSchemaDto', $response);
    return $_response_object;
}

#
# get_json_schema_for_webhook_payload
#
# 
# 
# @param string $webhook_id  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_json_schema_for_webhook_payload' } = { 
        summary => '',
        params => $params,
        returns => 'JSONSchemaDto',
        };
}
# @return JSONSchemaDto
#
sub get_json_schema_for_webhook_payload {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling get_json_schema_for_webhook_payload");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/schema';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JSONSchemaDto', $response);
    return $_response_object;
}

#
# get_phone_number_webhooks_paginated
#
# Get paginated webhooks for a phone number
# 
# @param string $phone_id  (required)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $event_type Optional event type (optional)
# @param string $search_filter Optional search filter (optional)
# @param string $health Filter by webhook health (optional)
{
    my $params = {
    'phone_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'event_type' => {
        data_type => 'string',
        description => 'Optional event type',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'health' => {
        data_type => 'string',
        description => 'Filter by webhook health',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_phone_number_webhooks_paginated' } = { 
        summary => 'Get paginated webhooks for a phone number',
        params => $params,
        returns => 'PageWebhookProjection',
        };
}
# @return PageWebhookProjection
#
sub get_phone_number_webhooks_paginated {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_id' is set
    unless (exists $args{'phone_id'}) {
      croak("Missing the required parameter 'phone_id' when calling get_phone_number_webhooks_paginated");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneId}/webhooks/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'event_type'}) {
        $query_params->{'eventType'} = $self->{api_client}->to_query_value($args{'event_type'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'health'}) {
        $query_params->{'health'} = $self->{api_client}->to_query_value($args{'health'});
    }

    # path params
    if ( exists $args{'phone_id'}) {
        my $_base_variable = "{" . "phoneId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookProjection', $response);
    return $_response_object;
}

#
# get_test_webhook_payload
#
# 
# 
# @param string $event_name  (optional)
{
    my $params = {
    'event_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload' } = { 
        summary => '',
        params => $params,
        returns => 'AbstractWebhookPayload',
        };
}
# @return AbstractWebhookPayload
#
sub get_test_webhook_payload {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event_name'}) {
        $query_params->{'eventName'} = $self->{api_client}->to_query_value($args{'event_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AbstractWebhookPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_bounce
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_bounce' } = { 
        summary => '',
        params => $params,
        returns => 'WebhookBouncePayload',
        };
}
# @return WebhookBouncePayload
#
sub get_test_webhook_payload_bounce {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/email-bounce-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookBouncePayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_bounce_recipient
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_bounce_recipient' } = { 
        summary => '',
        params => $params,
        returns => 'WebhookBounceRecipientPayload',
        };
}
# @return WebhookBounceRecipientPayload
#
sub get_test_webhook_payload_bounce_recipient {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/email-bounce-recipient-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookBounceRecipientPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_delivery_status
#
# Get webhook test payload for delivery status event
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_delivery_status' } = { 
        summary => 'Get webhook test payload for delivery status event',
        params => $params,
        returns => 'WebhookDeliveryStatusPayload',
        };
}
# @return WebhookDeliveryStatusPayload
#
sub get_test_webhook_payload_delivery_status {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/delivery-status-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDeliveryStatusPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_email_opened
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_email_opened' } = { 
        summary => '',
        params => $params,
        returns => 'WebhookEmailOpenedPayload',
        };
}
# @return WebhookEmailOpenedPayload
#
sub get_test_webhook_payload_email_opened {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/email-opened-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookEmailOpenedPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_email_read
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_email_read' } = { 
        summary => '',
        params => $params,
        returns => 'WebhookEmailReadPayload',
        };
}
# @return WebhookEmailReadPayload
#
sub get_test_webhook_payload_email_read {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/email-read-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookEmailReadPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_for_webhook
#
# 
# 
# @param string $webhook_id  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_for_webhook' } = { 
        summary => '',
        params => $params,
        returns => 'AbstractWebhookPayload',
        };
}
# @return AbstractWebhookPayload
#
sub get_test_webhook_payload_for_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling get_test_webhook_payload_for_webhook");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/example';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AbstractWebhookPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_new_attachment
#
# Get webhook test payload for new attachment event
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_new_attachment' } = { 
        summary => 'Get webhook test payload for new attachment event',
        params => $params,
        returns => 'WebhookNewAttachmentPayload',
        };
}
# @return WebhookNewAttachmentPayload
#
sub get_test_webhook_payload_new_attachment {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/new-attachment-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookNewAttachmentPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_new_contact
#
# Get webhook test payload for new contact event
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_new_contact' } = { 
        summary => 'Get webhook test payload for new contact event',
        params => $params,
        returns => 'WebhookNewContactPayload',
        };
}
# @return WebhookNewContactPayload
#
sub get_test_webhook_payload_new_contact {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/new-contact-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookNewContactPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_new_email
#
# Get webhook test payload for new email event
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_new_email' } = { 
        summary => 'Get webhook test payload for new email event',
        params => $params,
        returns => 'WebhookNewEmailPayload',
        };
}
# @return WebhookNewEmailPayload
#
sub get_test_webhook_payload_new_email {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/new-email-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookNewEmailPayload', $response);
    return $_response_object;
}

#
# get_test_webhook_payload_new_sms
#
# Get webhook test payload for new sms event
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_test_webhook_payload_new_sms' } = { 
        summary => 'Get webhook test payload for new sms event',
        params => $params,
        returns => 'WebhookNewSmsPayload',
        };
}
# @return WebhookNewSmsPayload
#
sub get_test_webhook_payload_new_sms {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/test/new-sms-payload';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookNewSmsPayload', $response);
    return $_response_object;
}

#
# get_webhook
#
# Get a webhook
# 
# @param string $webhook_id  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_webhook' } = { 
        summary => 'Get a webhook',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub get_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling get_webhook");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# get_webhook_result
#
# Get a webhook result for a webhook
# 
# @param string $webhook_result_id Webhook Result ID (required)
{
    my $params = {
    'webhook_result_id' => {
        data_type => 'string',
        description => 'Webhook Result ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_webhook_result' } = { 
        summary => 'Get a webhook result for a webhook',
        params => $params,
        returns => 'WebhookResultDto',
        };
}
# @return WebhookResultDto
#
sub get_webhook_result {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_result_id' is set
    unless (exists $args{'webhook_result_id'}) {
      croak("Missing the required parameter 'webhook_result_id' when calling get_webhook_result");
    }

    # parse inputs
    my $_resource_path = '/webhooks/results/{webhookResultId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_result_id'}) {
        my $_base_variable = "{" . "webhookResultId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_result_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookResultDto', $response);
    return $_response_object;
}

#
# get_webhook_results
#
# Get a webhook results for a webhook
# 
# @param string $webhook_id ID of webhook to get results for (required)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param boolean $unseen_only Filter for unseen exceptions only (optional)
# @param string $result_type Filter by result type (optional)
# @param string $event_name Filter by event name (optional)
# @param int $min_status_code Minimum response status (optional)
# @param int $max_status_code Maximum response status (optional)
# @param string $inbox_id Inbox ID (optional)
# @param string $sms_id Sms ID (optional)
# @param string $attachment_id Attachment ID (optional)
# @param string $email_id Email ID (optional)
# @param string $phone_id Phone ID (optional)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => 'ID of webhook to get results for',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'unseen_only' => {
        data_type => 'boolean',
        description => 'Filter for unseen exceptions only',
        required => '0',
    },
    'result_type' => {
        data_type => 'string',
        description => 'Filter by result type',
        required => '0',
    },
    'event_name' => {
        data_type => 'string',
        description => 'Filter by event name',
        required => '0',
    },
    'min_status_code' => {
        data_type => 'int',
        description => 'Minimum response status',
        required => '0',
    },
    'max_status_code' => {
        data_type => 'int',
        description => 'Maximum response status',
        required => '0',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID',
        required => '0',
    },
    'sms_id' => {
        data_type => 'string',
        description => 'Sms ID',
        required => '0',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'Attachment ID',
        required => '0',
    },
    'email_id' => {
        data_type => 'string',
        description => 'Email ID',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Phone ID',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_webhook_results' } = { 
        summary => 'Get a webhook results for a webhook',
        params => $params,
        returns => 'PageWebhookResult',
        };
}
# @return PageWebhookResult
#
sub get_webhook_results {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling get_webhook_results");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'unseen_only'}) {
        $query_params->{'unseenOnly'} = $self->{api_client}->to_query_value($args{'unseen_only'});
    }

    # query params
    if ( exists $args{'result_type'}) {
        $query_params->{'resultType'} = $self->{api_client}->to_query_value($args{'result_type'});
    }

    # query params
    if ( exists $args{'event_name'}) {
        $query_params->{'eventName'} = $self->{api_client}->to_query_value($args{'event_name'});
    }

    # query params
    if ( exists $args{'min_status_code'}) {
        $query_params->{'minStatusCode'} = $self->{api_client}->to_query_value($args{'min_status_code'});
    }

    # query params
    if ( exists $args{'max_status_code'}) {
        $query_params->{'maxStatusCode'} = $self->{api_client}->to_query_value($args{'max_status_code'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'sms_id'}) {
        $query_params->{'smsId'} = $self->{api_client}->to_query_value($args{'sms_id'});
    }

    # query params
    if ( exists $args{'attachment_id'}) {
        $query_params->{'attachmentId'} = $self->{api_client}->to_query_value($args{'attachment_id'});
    }

    # query params
    if ( exists $args{'email_id'}) {
        $query_params->{'emailId'} = $self->{api_client}->to_query_value($args{'email_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageWebhookResult', $response);
    return $_response_object;
}

#
# get_webhook_results_count
#
# Get a webhook results count for a webhook
# 
# @param string $webhook_id ID of webhook to get results for (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => 'ID of webhook to get results for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_webhook_results_count' } = { 
        summary => 'Get a webhook results count for a webhook',
        params => $params,
        returns => 'CountDto',
        };
}
# @return CountDto
#
sub get_webhook_results_count {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling get_webhook_results_count");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/results/count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountDto', $response);
    return $_response_object;
}

#
# get_webhook_results_unseen_error_count
#
# Get count of unseen webhook results with error status
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_webhook_results_unseen_error_count' } = { 
        summary => 'Get count of unseen webhook results with error status',
        params => $params,
        returns => 'UnseenErrorCountDto',
        };
}
# @return UnseenErrorCountDto
#
sub get_webhook_results_unseen_error_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/results/unseen-count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UnseenErrorCountDto', $response);
    return $_response_object;
}

#
# get_webhooks
#
# Get all webhooks for an Inbox
# 
# @param string $inbox_id  (required)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_webhooks' } = { 
        summary => 'Get all webhooks for an Inbox',
        params => $params,
        returns => 'ARRAY[WebhookProjection]',
        };
}
# @return ARRAY[WebhookProjection]
#
sub get_webhooks {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_webhooks");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/webhooks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[WebhookProjection]', $response);
    return $_response_object;
}

#
# redrive_all_webhook_results
#
# Redrive all webhook results that have failed status
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'redrive_all_webhook_results' } = { 
        summary => 'Redrive all webhook results that have failed status',
        params => $params,
        returns => 'WebhookRedriveAllResult',
        };
}
# @return WebhookRedriveAllResult
#
sub redrive_all_webhook_results {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhooks/results/redrive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookRedriveAllResult', $response);
    return $_response_object;
}

#
# redrive_webhook_result
#
# Get a webhook result and try to resend the original webhook payload
# 
# @param string $webhook_result_id Webhook Result ID (required)
{
    my $params = {
    'webhook_result_id' => {
        data_type => 'string',
        description => 'Webhook Result ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'redrive_webhook_result' } = { 
        summary => 'Get a webhook result and try to resend the original webhook payload',
        params => $params,
        returns => 'WebhookRedriveResult',
        };
}
# @return WebhookRedriveResult
#
sub redrive_webhook_result {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_result_id' is set
    unless (exists $args{'webhook_result_id'}) {
      croak("Missing the required parameter 'webhook_result_id' when calling redrive_webhook_result");
    }

    # parse inputs
    my $_resource_path = '/webhooks/results/{webhookResultId}/redrive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_result_id'}) {
        my $_base_variable = "{" . "webhookResultId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_result_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookRedriveResult', $response);
    return $_response_object;
}

#
# send_test_data
#
# Send webhook test data
# 
# @param string $webhook_id  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_test_data' } = { 
        summary => 'Send webhook test data',
        params => $params,
        returns => 'WebhookTestResult',
        };
}
# @return WebhookTestResult
#
sub send_test_data {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling send_test_data");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookTestResult', $response);
    return $_response_object;
}

#
# update_webhook
#
# Update a webhook
# 
# @param string $webhook_id  (required)
# @param CreateWebhookOptions $create_webhook_options  (required)
# @param string $inbox_id  (optional)
# @param string $phone_number_id  (optional)
# @param boolean $override_auth  (optional)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_webhook_options' => {
        data_type => 'CreateWebhookOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'override_auth' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_webhook' } = { 
        summary => 'Update a webhook',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub update_webhook {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling update_webhook");
    }

    # verify the required parameter 'create_webhook_options' is set
    unless (exists $args{'create_webhook_options'}) {
      croak("Missing the required parameter 'create_webhook_options' when calling update_webhook");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_number_id'}) {
        $query_params->{'phoneNumberId'} = $self->{api_client}->to_query_value($args{'phone_number_id'});
    }

    # query params
    if ( exists $args{'override_auth'}) {
        $query_params->{'overrideAuth'} = $self->{api_client}->to_query_value($args{'override_auth'});
    }

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_webhook_options'}) {
        $_body_data = $args{'create_webhook_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# update_webhook_headers
#
# Update a webhook request headers
# 
# @param string $webhook_id  (required)
# @param WebhookHeaders $webhook_headers  (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'webhook_headers' => {
        data_type => 'WebhookHeaders',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_webhook_headers' } = { 
        summary => 'Update a webhook request headers',
        params => $params,
        returns => 'WebhookDto',
        };
}
# @return WebhookDto
#
sub update_webhook_headers {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling update_webhook_headers");
    }

    # verify the required parameter 'webhook_headers' is set
    unless (exists $args{'webhook_headers'}) {
      croak("Missing the required parameter 'webhook_headers' when calling update_webhook_headers");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/headers';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'webhook_headers'}) {
        $_body_data = $args{'webhook_headers'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookDto', $response);
    return $_response_object;
}

#
# verify_webhook_signature
#
# Verify a webhook payload signature
# 
# @param VerifyWebhookSignatureOptions $verify_webhook_signature_options  (required)
{
    my $params = {
    'verify_webhook_signature_options' => {
        data_type => 'VerifyWebhookSignatureOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verify_webhook_signature' } = { 
        summary => 'Verify a webhook payload signature',
        params => $params,
        returns => 'VerifyWebhookSignatureResults',
        };
}
# @return VerifyWebhookSignatureResults
#
sub verify_webhook_signature {
    my ($self, %args) = @_;

    # verify the required parameter 'verify_webhook_signature_options' is set
    unless (exists $args{'verify_webhook_signature_options'}) {
      croak("Missing the required parameter 'verify_webhook_signature_options' when calling verify_webhook_signature");
    }

    # parse inputs
    my $_resource_path = '/webhooks/verify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'verify_webhook_signature_options'}) {
        $_body_data = $args{'verify_webhook_signature_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VerifyWebhookSignatureResults', $response);
    return $_response_object;
}

#
# wait_for_webhook_results
#
# Wait for webhook results for a webhook
# 
# @param string $webhook_id ID of webhook to get results for (required)
# @param int $expected_count Expected result count (required)
# @param int $timeout Max time to wait in milliseconds (required)
{
    my $params = {
    'webhook_id' => {
        data_type => 'string',
        description => 'ID of webhook to get results for',
        required => '1',
    },
    'expected_count' => {
        data_type => 'int',
        description => 'Expected result count',
        required => '1',
    },
    'timeout' => {
        data_type => 'int',
        description => 'Max time to wait in milliseconds',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'wait_for_webhook_results' } = { 
        summary => 'Wait for webhook results for a webhook',
        params => $params,
        returns => 'ARRAY[WebhookResultDto]',
        };
}
# @return ARRAY[WebhookResultDto]
#
sub wait_for_webhook_results {
    my ($self, %args) = @_;

    # verify the required parameter 'webhook_id' is set
    unless (exists $args{'webhook_id'}) {
      croak("Missing the required parameter 'webhook_id' when calling wait_for_webhook_results");
    }

    # verify the required parameter 'expected_count' is set
    unless (exists $args{'expected_count'}) {
      croak("Missing the required parameter 'expected_count' when calling wait_for_webhook_results");
    }

    # verify the required parameter 'timeout' is set
    unless (exists $args{'timeout'}) {
      croak("Missing the required parameter 'timeout' when calling wait_for_webhook_results");
    }

    # parse inputs
    my $_resource_path = '/webhooks/{webhookId}/wait';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'expected_count'}) {
        $query_params->{'expectedCount'} = $self->{api_client}->to_query_value($args{'expected_count'});
    }

    # query params
    if ( exists $args{'timeout'}) {
        $query_params->{'timeout'} = $self->{api_client}->to_query_value($args{'timeout'});
    }

    # path params
    if ( exists $args{'webhook_id'}) {
        my $_base_variable = "{" . "webhookId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'webhook_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[WebhookResultDto]', $response);
    return $_response_object;
}

1;
