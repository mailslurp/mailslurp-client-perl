=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::Object::ImapSmtpAccessDetails;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Access details for inbox using SMTP or IMAP
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "MailSlurp::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Access details for inbox using SMTP or IMAP',
                                  class => 'ImapSmtpAccessDetails',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'secure_smtp_server_host' => {
        datatype => 'string',
        base_name => 'secureSmtpServerHost',
        description => 'Secure TLS SMTP server host domain',
        format => '',
        read_only => '',
            },
    'secure_smtp_server_port' => {
        datatype => 'int',
        base_name => 'secureSmtpServerPort',
        description => 'Secure TLS SMTP server host port',
        format => '',
        read_only => '',
            },
    'secure_smtp_username' => {
        datatype => 'string',
        base_name => 'secureSmtpUsername',
        description => 'Secure TLS SMTP username for login',
        format => '',
        read_only => '',
            },
    'secure_smtp_password' => {
        datatype => 'string',
        base_name => 'secureSmtpPassword',
        description => 'Secure TLS SMTP password for login',
        format => '',
        read_only => '',
            },
    'smtp_server_host' => {
        datatype => 'string',
        base_name => 'smtpServerHost',
        description => 'SMTP server host domain',
        format => '',
        read_only => '',
            },
    'smtp_server_port' => {
        datatype => 'int',
        base_name => 'smtpServerPort',
        description => 'SMTP server host port',
        format => '',
        read_only => '',
            },
    'smtp_username' => {
        datatype => 'string',
        base_name => 'smtpUsername',
        description => 'SMTP username for login',
        format => '',
        read_only => '',
            },
    'smtp_password' => {
        datatype => 'string',
        base_name => 'smtpPassword',
        description => 'SMTP password for login',
        format => '',
        read_only => '',
            },
    'imap_server_host' => {
        datatype => 'string',
        base_name => 'imapServerHost',
        description => 'IMAP server host domain',
        format => '',
        read_only => '',
            },
    'imap_server_port' => {
        datatype => 'int',
        base_name => 'imapServerPort',
        description => 'IMAP server host port',
        format => '',
        read_only => '',
            },
    'imap_username' => {
        datatype => 'string',
        base_name => 'imapUsername',
        description => 'IMAP username for login',
        format => '',
        read_only => '',
            },
    'imap_password' => {
        datatype => 'string',
        base_name => 'imapPassword',
        description => 'IMAP password for login',
        format => '',
        read_only => '',
            },
    'imap_mailbox' => {
        datatype => 'string',
        base_name => 'imapMailbox',
        description => 'IMAP mailbox to SELECT',
        format => '',
        read_only => '',
            },
    'mail_from_domain' => {
        datatype => 'string',
        base_name => 'mailFromDomain',
        description => 'Mail from domain or SMTP HELO value',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'secure_smtp_server_host' => 'string',
    'secure_smtp_server_port' => 'int',
    'secure_smtp_username' => 'string',
    'secure_smtp_password' => 'string',
    'smtp_server_host' => 'string',
    'smtp_server_port' => 'int',
    'smtp_username' => 'string',
    'smtp_password' => 'string',
    'imap_server_host' => 'string',
    'imap_server_port' => 'int',
    'imap_username' => 'string',
    'imap_password' => 'string',
    'imap_mailbox' => 'string',
    'mail_from_domain' => 'string'
} );

__PACKAGE__->attribute_map( {
    'secure_smtp_server_host' => 'secureSmtpServerHost',
    'secure_smtp_server_port' => 'secureSmtpServerPort',
    'secure_smtp_username' => 'secureSmtpUsername',
    'secure_smtp_password' => 'secureSmtpPassword',
    'smtp_server_host' => 'smtpServerHost',
    'smtp_server_port' => 'smtpServerPort',
    'smtp_username' => 'smtpUsername',
    'smtp_password' => 'smtpPassword',
    'imap_server_host' => 'imapServerHost',
    'imap_server_port' => 'imapServerPort',
    'imap_username' => 'imapUsername',
    'imap_password' => 'imapPassword',
    'imap_mailbox' => 'imapMailbox',
    'mail_from_domain' => 'mailFromDomain'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
