=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::Object::CreateConnectorImapConnectionOptions;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Options for IMAP connection to external email inbox. Allows syncing emails via IMAP.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "MailSlurp::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Options for IMAP connection to external email inbox. Allows syncing emails via IMAP.',
                                  class => 'CreateConnectorImapConnectionOptions',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'imap_ssl' => {
        datatype => 'boolean',
        base_name => 'imapSsl',
        description => '',
        format => '',
        read_only => '',
            },
    'imap_username' => {
        datatype => 'string',
        base_name => 'imapUsername',
        description => '',
        format => '',
        read_only => '',
            },
    'imap_password' => {
        datatype => 'string',
        base_name => 'imapPassword',
        description => '',
        format => '',
        read_only => '',
            },
    'select_folder' => {
        datatype => 'string',
        base_name => 'selectFolder',
        description => 'Optional folder to select during IMAP connection',
        format => '',
        read_only => '',
            },
    'search_terms' => {
        datatype => 'string',
        base_name => 'searchTerms',
        description => '',
        format => '',
        read_only => '',
            },
    'imap_port' => {
        datatype => 'int',
        base_name => 'imapPort',
        description => 'IMAP server port',
        format => '',
        read_only => '',
            },
    'imap_host' => {
        datatype => 'string',
        base_name => 'imapHost',
        description => 'IMAP server host',
        format => '',
        read_only => '',
            },
    'enabled' => {
        datatype => 'boolean',
        base_name => 'enabled',
        description => 'IMAP server enabled',
        format => '',
        read_only => '',
            },
    'start_tls' => {
        datatype => 'boolean',
        base_name => 'startTls',
        description => '',
        format => '',
        read_only => '',
            },
    'proxy_enabled' => {
        datatype => 'boolean',
        base_name => 'proxyEnabled',
        description => '',
        format => '',
        read_only => '',
            },
    'proxy_port' => {
        datatype => 'int',
        base_name => 'proxyPort',
        description => '',
        format => '',
        read_only => '',
            },
    'proxy_host' => {
        datatype => 'string',
        base_name => 'proxyHost',
        description => '',
        format => '',
        read_only => '',
            },
    'local_host_name' => {
        datatype => 'string',
        base_name => 'localHostName',
        description => '',
        format => '',
        read_only => '',
            },
    'mechanisms' => {
        datatype => 'ARRAY[string]',
        base_name => 'mechanisms',
        description => 'List of IMAP mechanisms',
        format => '',
        read_only => '',
            },
    'ssl_trust' => {
        datatype => 'string',
        base_name => 'sslTrust',
        description => '',
        format => '',
        read_only => '',
            },
    'ssl_protocols' => {
        datatype => 'ARRAY[string]',
        base_name => 'sslProtocols',
        description => 'List of SSL protocols',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'imap_ssl' => 'boolean',
    'imap_username' => 'string',
    'imap_password' => 'string',
    'select_folder' => 'string',
    'search_terms' => 'string',
    'imap_port' => 'int',
    'imap_host' => 'string',
    'enabled' => 'boolean',
    'start_tls' => 'boolean',
    'proxy_enabled' => 'boolean',
    'proxy_port' => 'int',
    'proxy_host' => 'string',
    'local_host_name' => 'string',
    'mechanisms' => 'ARRAY[string]',
    'ssl_trust' => 'string',
    'ssl_protocols' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'imap_ssl' => 'imapSsl',
    'imap_username' => 'imapUsername',
    'imap_password' => 'imapPassword',
    'select_folder' => 'selectFolder',
    'search_terms' => 'searchTerms',
    'imap_port' => 'imapPort',
    'imap_host' => 'imapHost',
    'enabled' => 'enabled',
    'start_tls' => 'startTls',
    'proxy_enabled' => 'proxyEnabled',
    'proxy_port' => 'proxyPort',
    'proxy_host' => 'proxyHost',
    'local_host_name' => 'localHostName',
    'mechanisms' => 'mechanisms',
    'ssl_trust' => 'sslTrust',
    'ssl_protocols' => 'sslProtocols'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
