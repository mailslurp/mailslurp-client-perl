=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::Object::WaitForConditions;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use MailSlurp::Object::MatchOption;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Conditions that a &#x60;waitForXEmails&#x60; endpoint operates on. The methods wait until given conditions are met or a timeout is reached. If the conditions are met without needing to wait the results will be returned immediately. Can include &#x60;unreadOnly&#x60; to ignore already read emails that were returned in an API call or viewing in the dashboard. Can also include matches for emails containing &#x60;from&#x60;, &#x60;subject&#x60;, &#x60;hasAttachments&#x60; etc.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "MailSlurp::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Conditions that a &#x60;waitForXEmails&#x60; endpoint operates on. The methods wait until given conditions are met or a timeout is reached. If the conditions are met without needing to wait the results will be returned immediately. Can include &#x60;unreadOnly&#x60; to ignore already read emails that were returned in an API call or viewing in the dashboard. Can also include matches for emails containing &#x60;from&#x60;, &#x60;subject&#x60;, &#x60;hasAttachments&#x60; etc.',
                                  class => 'WaitForConditions',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'before' => {
        datatype => 'DateTime',
        base_name => 'before',
        description => 'ISO Date Time latest time of email to consider. Filter for matching emails that were received before this date',
        format => '',
        read_only => '',
            },
    'count' => {
        datatype => 'int',
        base_name => 'count',
        description => 'Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.',
        format => '',
        read_only => '',
            },
    'count_type' => {
        datatype => 'string',
        base_name => 'countType',
        description => 'How should the found count be compared to the expected count.',
        format => '',
        read_only => '',
            },
    'delay_timeout' => {
        datatype => 'int',
        base_name => 'delayTimeout',
        description => 'Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.',
        format => '',
        read_only => '',
            },
    'inbox_id' => {
        datatype => 'string',
        base_name => 'inboxId',
        description => 'ID of inbox to search within and apply conditions to. Essentially filtering the emails found to give a count.',
        format => '',
        read_only => '',
            },
    'matches' => {
        datatype => 'ARRAY[MatchOption]',
        base_name => 'matches',
        description => 'Conditions that should be matched for an email to qualify for results. Each condition will be applied in order to each email within an inbox to filter a result list of matching emails you are waiting for.',
        format => '',
        read_only => '',
            },
    'since' => {
        datatype => 'DateTime',
        base_name => 'since',
        description => 'ISO Date Time earliest time of email to consider. Filter for matching emails that were received after this date',
        format => '',
        read_only => '',
            },
    'sort_direction' => {
        datatype => 'string',
        base_name => 'sortDirection',
        description => 'Direction to sort matching emails by created time',
        format => '',
        read_only => '',
            },
    'timeout' => {
        datatype => 'int',
        base_name => 'timeout',
        description => 'Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.',
        format => '',
        read_only => '',
            },
    'unread_only' => {
        datatype => 'boolean',
        base_name => 'unreadOnly',
        description => 'Apply conditions only to **unread** emails. All emails begin with &#x60;read&#x3D;false&#x60;. An email is marked &#x60;read&#x3D;true&#x60; when an &#x60;EmailDto&#x60; representation of it has been returned to the user at least once. For example you have called &#x60;getEmail&#x60; or &#x60;waitForLatestEmail&#x60; etc., or you have viewed the email in the dashboard.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'before' => 'DateTime',
    'count' => 'int',
    'count_type' => 'string',
    'delay_timeout' => 'int',
    'inbox_id' => 'string',
    'matches' => 'ARRAY[MatchOption]',
    'since' => 'DateTime',
    'sort_direction' => 'string',
    'timeout' => 'int',
    'unread_only' => 'boolean'
} );

__PACKAGE__->attribute_map( {
    'before' => 'before',
    'count' => 'count',
    'count_type' => 'countType',
    'delay_timeout' => 'delayTimeout',
    'inbox_id' => 'inboxId',
    'matches' => 'matches',
    'since' => 'since',
    'sort_direction' => 'sortDirection',
    'timeout' => 'timeout',
    'unread_only' => 'unreadOnly'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
