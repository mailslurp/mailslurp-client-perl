=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::Object::StructuredOutputSchema;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#JSON output schema for structured content repsonses. This schema dictates the format that an AI should use when responding to your instructions.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "MailSlurp::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'JSON output schema for structured content repsonses. This schema dictates the format that an AI should use when responding to your instructions.',
                                  class => 'StructuredOutputSchema',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'any_of' => {
        datatype => 'ARRAY[StructuredOutputSchema]',
        base_name => 'anyOf',
        description => '',
        format => '',
        read_only => '',
            },
    'default' => {
        datatype => 'object',
        base_name => 'default',
        description => '',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => 'Provide a description of the schema to help the AI understand the schema.',
        format => '',
        read_only => '',
            },
    'enum' => {
        datatype => 'ARRAY[string]',
        base_name => 'enum',
        description => 'When using type string and format enum pass a collection of enum values here.',
        format => '',
        read_only => '',
            },
    'example' => {
        datatype => 'object',
        base_name => 'example',
        description => '',
        format => '',
        read_only => '',
            },
    'format' => {
        datatype => 'string',
        base_name => 'format',
        description => 'Format for string types. Can be null, date-time or enum.',
        format => '',
        read_only => '',
            },
    'items' => {
        datatype => 'StructuredOutputSchema',
        base_name => 'items',
        description => '',
        format => '',
        read_only => '',
            },
    'max_items' => {
        datatype => 'int',
        base_name => 'maxItems',
        description => '',
        format => '',
        read_only => '',
            },
    'min_items' => {
        datatype => 'int',
        base_name => 'minItems',
        description => '',
        format => '',
        read_only => '',
            },
    'max_length' => {
        datatype => 'int',
        base_name => 'maxLength',
        description => '',
        format => '',
        read_only => '',
            },
    'min_length' => {
        datatype => 'int',
        base_name => 'minLength',
        description => '',
        format => '',
        read_only => '',
            },
    'pattern' => {
        datatype => 'string',
        base_name => 'pattern',
        description => '',
        format => '',
        read_only => '',
            },
    'properties' => {
        datatype => 'HASH[string,StructuredOutputSchema]',
        base_name => 'properties',
        description => 'Properties of an OBJECT schema. These are key value pairs where the key is the property name and the value is the schema for that property.',
        format => '',
        read_only => '',
            },
    'property_ordering' => {
        datatype => 'ARRAY[string]',
        base_name => 'propertyOrdering',
        description => 'Pass an array of property names to specify the order of properties in the generated JSON object if required.',
        format => '',
        read_only => '',
            },
    'required' => {
        datatype => 'ARRAY[string]',
        base_name => 'required',
        description => '',
        format => '',
        read_only => '',
            },
    'max_properties' => {
        datatype => 'int',
        base_name => 'maxProperties',
        description => '',
        format => '',
        read_only => '',
            },
    'min_properties' => {
        datatype => 'int',
        base_name => 'minProperties',
        description => '',
        format => '',
        read_only => '',
            },
    'maximum' => {
        datatype => 'double',
        base_name => 'maximum',
        description => '',
        format => '',
        read_only => '',
            },
    'minimum' => {
        datatype => 'double',
        base_name => 'minimum',
        description => '',
        format => '',
        read_only => '',
            },
    'nullable' => {
        datatype => 'boolean',
        base_name => 'nullable',
        description => '',
        format => '',
        read_only => '',
            },
    'title' => {
        datatype => 'string',
        base_name => 'title',
        description => '',
        format => '',
        read_only => '',
            },
    'type' => {
        datatype => 'string',
        base_name => 'type',
        description => 'Primitive JSON schema types with a fallback CUSTOM for unknown values.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'any_of' => 'ARRAY[StructuredOutputSchema]',
    'default' => 'object',
    'description' => 'string',
    'enum' => 'ARRAY[string]',
    'example' => 'object',
    'format' => 'string',
    'items' => 'StructuredOutputSchema',
    'max_items' => 'int',
    'min_items' => 'int',
    'max_length' => 'int',
    'min_length' => 'int',
    'pattern' => 'string',
    'properties' => 'HASH[string,StructuredOutputSchema]',
    'property_ordering' => 'ARRAY[string]',
    'required' => 'ARRAY[string]',
    'max_properties' => 'int',
    'min_properties' => 'int',
    'maximum' => 'double',
    'minimum' => 'double',
    'nullable' => 'boolean',
    'title' => 'string',
    'type' => 'string'
} );

__PACKAGE__->attribute_map( {
    'any_of' => 'anyOf',
    'default' => 'default',
    'description' => 'description',
    'enum' => 'enum',
    'example' => 'example',
    'format' => 'format',
    'items' => 'items',
    'max_items' => 'maxItems',
    'min_items' => 'minItems',
    'max_length' => 'maxLength',
    'min_length' => 'minLength',
    'pattern' => 'pattern',
    'properties' => 'properties',
    'property_ordering' => 'propertyOrdering',
    'required' => 'required',
    'max_properties' => 'maxProperties',
    'min_properties' => 'minProperties',
    'maximum' => 'maximum',
    'minimum' => 'minimum',
    'nullable' => 'nullable',
    'title' => 'title',
    'type' => 'type'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
