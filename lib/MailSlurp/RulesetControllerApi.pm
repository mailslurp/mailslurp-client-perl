=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::RulesetControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_new_ruleset
#
# Create a ruleset
# 
# @param CreateRulesetOptions $create_ruleset_options  (required)
# @param string $inbox_id Inbox id to attach ruleset to (optional)
# @param string $phone_id Phone id to attach ruleset to (optional)
{
    my $params = {
    'create_ruleset_options' => {
        data_type => 'CreateRulesetOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox id to attach ruleset to',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Phone id to attach ruleset to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_ruleset' } = { 
        summary => 'Create a ruleset',
        params => $params,
        returns => 'RulesetDto',
        };
}
# @return RulesetDto
#
sub create_new_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'create_ruleset_options' is set
    unless (exists $args{'create_ruleset_options'}) {
      croak("Missing the required parameter 'create_ruleset_options' when calling create_new_ruleset");
    }

    # parse inputs
    my $_resource_path = '/rulesets';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_ruleset_options'}) {
        $_body_data = $args{'create_ruleset_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RulesetDto', $response);
    return $_response_object;
}

#
# delete_ruleset
#
# Delete a ruleset
# 
# @param string $id ID of ruleset (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of ruleset',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_ruleset' } = { 
        summary => 'Delete a ruleset',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_ruleset");
    }

    # parse inputs
    my $_resource_path = '/rulesets/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_rulesets
#
# Delete rulesets
# 
# @param string $inbox_id Optional inbox id to attach ruleset to (optional)
# @param string $phone_id  (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to attach ruleset to',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_rulesets' } = { 
        summary => 'Delete rulesets',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_rulesets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/rulesets';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_ruleset
#
# Get a ruleset
# 
# @param string $id ID of ruleset (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of ruleset',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ruleset' } = { 
        summary => 'Get a ruleset',
        params => $params,
        returns => 'RulesetDto',
        };
}
# @return RulesetDto
#
sub get_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_ruleset");
    }

    # parse inputs
    my $_resource_path = '/rulesets/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RulesetDto', $response);
    return $_response_object;
}

#
# get_rulesets
#
# List rulesets block and allow lists
# 
# @param string $inbox_id Optional inbox id to get rulesets from (optional)
# @param string $phone_id Optional phone id to get rulesets from (optional)
# @param int $page Optional page index in inbox ruleset list pagination (optional, default to 0)
# @param int $size Optional page size in inbox ruleset list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to get rulesets from',
        required => '0',
    },
    'phone_id' => {
        data_type => 'string',
        description => 'Optional phone id to get rulesets from',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox ruleset list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox ruleset list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_rulesets' } = { 
        summary => 'List rulesets block and allow lists',
        params => $params,
        returns => 'PageRulesetDto',
        };
}
# @return PageRulesetDto
#
sub get_rulesets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/rulesets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'phone_id'}) {
        $query_params->{'phoneId'} = $self->{api_client}->to_query_value($args{'phone_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageRulesetDto', $response);
    return $_response_object;
}

#
# test_inbox_rulesets_for_inbox
#
# Test inbox rulesets for inbox
# 
# @param string $inbox_id ID of inbox (required)
# @param RulesetTestOptions $ruleset_test_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'ID of inbox',
        required => '1',
    },
    'ruleset_test_options' => {
        data_type => 'RulesetTestOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_inbox_rulesets_for_inbox' } = { 
        summary => 'Test inbox rulesets for inbox',
        params => $params,
        returns => 'InboxRulesetTestResult',
        };
}
# @return InboxRulesetTestResult
#
sub test_inbox_rulesets_for_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling test_inbox_rulesets_for_inbox");
    }

    # verify the required parameter 'ruleset_test_options' is set
    unless (exists $args{'ruleset_test_options'}) {
      croak("Missing the required parameter 'ruleset_test_options' when calling test_inbox_rulesets_for_inbox");
    }

    # parse inputs
    my $_resource_path = '/rulesets';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'ruleset_test_options'}) {
        $_body_data = $args{'ruleset_test_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxRulesetTestResult', $response);
    return $_response_object;
}

#
# test_new_ruleset
#
# Test new ruleset
# 
# @param TestNewInboxRulesetOptions $test_new_inbox_ruleset_options  (required)
{
    my $params = {
    'test_new_inbox_ruleset_options' => {
        data_type => 'TestNewInboxRulesetOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_new_ruleset' } = { 
        summary => 'Test new ruleset',
        params => $params,
        returns => 'InboxRulesetTestResult',
        };
}
# @return InboxRulesetTestResult
#
sub test_new_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'test_new_inbox_ruleset_options' is set
    unless (exists $args{'test_new_inbox_ruleset_options'}) {
      croak("Missing the required parameter 'test_new_inbox_ruleset_options' when calling test_new_ruleset");
    }

    # parse inputs
    my $_resource_path = '/rulesets';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'test_new_inbox_ruleset_options'}) {
        $_body_data = $args{'test_new_inbox_ruleset_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxRulesetTestResult', $response);
    return $_response_object;
}

#
# test_ruleset
#
# Test a ruleset
# 
# @param string $id ID of ruleset (required)
# @param RulesetTestOptions $ruleset_test_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of ruleset',
        required => '1',
    },
    'ruleset_test_options' => {
        data_type => 'RulesetTestOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_ruleset' } = { 
        summary => 'Test a ruleset',
        params => $params,
        returns => 'InboxRulesetTestResult',
        };
}
# @return InboxRulesetTestResult
#
sub test_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling test_ruleset");
    }

    # verify the required parameter 'ruleset_test_options' is set
    unless (exists $args{'ruleset_test_options'}) {
      croak("Missing the required parameter 'ruleset_test_options' when calling test_ruleset");
    }

    # parse inputs
    my $_resource_path = '/rulesets/{id}/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ruleset_test_options'}) {
        $_body_data = $args{'ruleset_test_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxRulesetTestResult', $response);
    return $_response_object;
}

#
# test_ruleset_receiving
#
# Test receiving with rulesets
# 
# @param TestRulesetReceivingOptions $test_ruleset_receiving_options  (required)
{
    my $params = {
    'test_ruleset_receiving_options' => {
        data_type => 'TestRulesetReceivingOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_ruleset_receiving' } = { 
        summary => 'Test receiving with rulesets',
        params => $params,
        returns => 'TestRulesetReceivingResult',
        };
}
# @return TestRulesetReceivingResult
#
sub test_ruleset_receiving {
    my ($self, %args) = @_;

    # verify the required parameter 'test_ruleset_receiving_options' is set
    unless (exists $args{'test_ruleset_receiving_options'}) {
      croak("Missing the required parameter 'test_ruleset_receiving_options' when calling test_ruleset_receiving");
    }

    # parse inputs
    my $_resource_path = '/rulesets/test-receiving';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'test_ruleset_receiving_options'}) {
        $_body_data = $args{'test_ruleset_receiving_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TestRulesetReceivingResult', $response);
    return $_response_object;
}

#
# test_ruleset_sending
#
# Test sending with rulesets
# 
# @param TestInboxRulesetSendingOptions $test_inbox_ruleset_sending_options  (required)
{
    my $params = {
    'test_inbox_ruleset_sending_options' => {
        data_type => 'TestInboxRulesetSendingOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_ruleset_sending' } = { 
        summary => 'Test sending with rulesets',
        params => $params,
        returns => 'TestRulesetSendingResult',
        };
}
# @return TestRulesetSendingResult
#
sub test_ruleset_sending {
    my ($self, %args) = @_;

    # verify the required parameter 'test_inbox_ruleset_sending_options' is set
    unless (exists $args{'test_inbox_ruleset_sending_options'}) {
      croak("Missing the required parameter 'test_inbox_ruleset_sending_options' when calling test_ruleset_sending");
    }

    # parse inputs
    my $_resource_path = '/rulesets/test-sending';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'test_inbox_ruleset_sending_options'}) {
        $_body_data = $args{'test_inbox_ruleset_sending_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TestRulesetSendingResult', $response);
    return $_response_object;
}

1;
