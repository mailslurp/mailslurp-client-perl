=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::GuestPortalControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_guest_portal
#
# Create a portal page for your customers or clients to log into email accounts and view emails.
# 
# @param CreatePortalOptions $create_portal_options  (required)
{
    my $params = {
    'create_portal_options' => {
        data_type => 'CreatePortalOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_guest_portal' } = { 
        summary => 'Create a portal page for your customers or clients to log into email accounts and view emails.',
        params => $params,
        returns => 'GuestPortalDto',
        };
}
# @return GuestPortalDto
#
sub create_guest_portal {
    my ($self, %args) = @_;

    # verify the required parameter 'create_portal_options' is set
    unless (exists $args{'create_portal_options'}) {
      croak("Missing the required parameter 'create_portal_options' when calling create_guest_portal");
    }

    # parse inputs
    my $_resource_path = '/guest-portal';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_portal_options'}) {
        $_body_data = $args{'create_portal_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuestPortalDto', $response);
    return $_response_object;
}

#
# create_guest_portal_user
#
# Create a portal guest user
# 
# @param string $portal_id  (required)
# @param CreatePortalUserOptions $create_portal_user_options  (required)
{
    my $params = {
    'portal_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_portal_user_options' => {
        data_type => 'CreatePortalUserOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_guest_portal_user' } = { 
        summary => 'Create a portal guest user',
        params => $params,
        returns => 'GuestPortalUserCreateDto',
        };
}
# @return GuestPortalUserCreateDto
#
sub create_guest_portal_user {
    my ($self, %args) = @_;

    # verify the required parameter 'portal_id' is set
    unless (exists $args{'portal_id'}) {
      croak("Missing the required parameter 'portal_id' when calling create_guest_portal_user");
    }

    # verify the required parameter 'create_portal_user_options' is set
    unless (exists $args{'create_portal_user_options'}) {
      croak("Missing the required parameter 'create_portal_user_options' when calling create_guest_portal_user");
    }

    # parse inputs
    my $_resource_path = '/guest-portal/{portalId}/user';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'portal_id'}) {
        my $_base_variable = "{" . "portalId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'portal_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_portal_user_options'}) {
        $_body_data = $args{'create_portal_user_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuestPortalUserCreateDto', $response);
    return $_response_object;
}

#
# get_all_guest_portal_users
#
# Get all guest users for portal
# 
# @param string $portal_id Optional portal ID (optional)
# @param string $search Optional search term (optional)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'portal_id' => {
        data_type => 'string',
        description => 'Optional portal ID',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optional search term',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_guest_portal_users' } = { 
        summary => 'Get all guest users for portal',
        params => $params,
        returns => 'PageGuestPortalUsers',
        };
}
# @return PageGuestPortalUsers
#
sub get_all_guest_portal_users {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/guest-portal/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'portal_id'}) {
        $query_params->{'portalId'} = $self->{api_client}->to_query_value($args{'portal_id'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageGuestPortalUsers', $response);
    return $_response_object;
}

#
# get_guest_portal
#
# Get a client email portal
# 
# @param string $portal_id  (required)
{
    my $params = {
    'portal_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_guest_portal' } = { 
        summary => 'Get a client email portal',
        params => $params,
        returns => 'GuestPortalDto',
        };
}
# @return GuestPortalDto
#
sub get_guest_portal {
    my ($self, %args) = @_;

    # verify the required parameter 'portal_id' is set
    unless (exists $args{'portal_id'}) {
      croak("Missing the required parameter 'portal_id' when calling get_guest_portal");
    }

    # parse inputs
    my $_resource_path = '/guest-portal/{portalId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'portal_id'}) {
        my $_base_variable = "{" . "portalId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'portal_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuestPortalDto', $response);
    return $_response_object;
}

#
# get_guest_portal_user
#
# Get guest user for portal
# 
# @param string $portal_id  (required)
# @param string $guest_id  (required)
{
    my $params = {
    'portal_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'guest_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_guest_portal_user' } = { 
        summary => 'Get guest user for portal',
        params => $params,
        returns => 'GuestPortalUserDto',
        };
}
# @return GuestPortalUserDto
#
sub get_guest_portal_user {
    my ($self, %args) = @_;

    # verify the required parameter 'portal_id' is set
    unless (exists $args{'portal_id'}) {
      croak("Missing the required parameter 'portal_id' when calling get_guest_portal_user");
    }

    # verify the required parameter 'guest_id' is set
    unless (exists $args{'guest_id'}) {
      croak("Missing the required parameter 'guest_id' when calling get_guest_portal_user");
    }

    # parse inputs
    my $_resource_path = '/guest-portal/{portalId}/user/{guestId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'portal_id'}) {
        my $_base_variable = "{" . "portalId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'portal_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'guest_id'}) {
        my $_base_variable = "{" . "guestId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'guest_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuestPortalUserDto', $response);
    return $_response_object;
}

#
# get_guest_portal_user_by_id
#
# Get guest user
# 
# @param string $guest_id  (required)
{
    my $params = {
    'guest_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_guest_portal_user_by_id' } = { 
        summary => 'Get guest user',
        params => $params,
        returns => 'GuestPortalUserDto',
        };
}
# @return GuestPortalUserDto
#
sub get_guest_portal_user_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'guest_id' is set
    unless (exists $args{'guest_id'}) {
      croak("Missing the required parameter 'guest_id' when calling get_guest_portal_user_by_id");
    }

    # parse inputs
    my $_resource_path = '/guest-portal/user/{guestId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'guest_id'}) {
        my $_base_variable = "{" . "guestId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'guest_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuestPortalUserDto', $response);
    return $_response_object;
}

#
# get_guest_portal_users
#
# Get all guest users for portal
# 
# @param string $portal_id  (required)
# @param string $search Optional search term (optional)
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'portal_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Optional search term',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_guest_portal_users' } = { 
        summary => 'Get all guest users for portal',
        params => $params,
        returns => 'PageGuestPortalUsers',
        };
}
# @return PageGuestPortalUsers
#
sub get_guest_portal_users {
    my ($self, %args) = @_;

    # verify the required parameter 'portal_id' is set
    unless (exists $args{'portal_id'}) {
      croak("Missing the required parameter 'portal_id' when calling get_guest_portal_users");
    }

    # parse inputs
    my $_resource_path = '/guest-portal/{portalId}/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # path params
    if ( exists $args{'portal_id'}) {
        my $_base_variable = "{" . "portalId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'portal_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageGuestPortalUsers', $response);
    return $_response_object;
}

#
# get_guest_portals
#
# Get guest portals
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_guest_portals' } = { 
        summary => 'Get guest portals',
        params => $params,
        returns => 'ARRAY[GuestPortalDto]',
        };
}
# @return ARRAY[GuestPortalDto]
#
sub get_guest_portals {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/guest-portal';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GuestPortalDto]', $response);
    return $_response_object;
}

1;
