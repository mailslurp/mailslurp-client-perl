=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::FormControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# submit_form
#
# Submit a form to be parsed and sent as an email to an address determined by the form fields
# 
# @param string $_to The email address that submitted form should be sent to. (optional)
# @param string $_subject Optional subject of the email that will be sent. (optional)
# @param string $_redirect_to Optional URL to redirect form submitter to after submission. If not present user will see a success message. (optional)
# @param string $_email_address Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)
# @param string $_success_message Optional success message to display if no _redirectTo present. (optional)
# @param string $_spam_check Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)
# @param string $other_parameters All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)
{
    my $params = {
    '_to' => {
        data_type => 'string',
        description => 'The email address that submitted form should be sent to.',
        required => '0',
    },
    '_subject' => {
        data_type => 'string',
        description => 'Optional subject of the email that will be sent.',
        required => '0',
    },
    '_redirect_to' => {
        data_type => 'string',
        description => 'Optional URL to redirect form submitter to after submission. If not present user will see a success message.',
        required => '0',
    },
    '_email_address' => {
        data_type => 'string',
        description => 'Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later.',
        required => '0',
    },
    '_success_message' => {
        data_type => 'string',
        description => 'Optional success message to display if no _redirectTo present.',
        required => '0',
    },
    '_spam_check' => {
        data_type => 'string',
        description => 'Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored.',
        required => '0',
    },
    'other_parameters' => {
        data_type => 'string',
        description => 'All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'submit_form' } = { 
        summary => 'Submit a form to be parsed and sent as an email to an address determined by the form fields',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub submit_form {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/forms';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'_to'}) {
        $query_params->{'_to'} = $self->{api_client}->to_query_value($args{'_to'});
    }

    # query params
    if ( exists $args{'_subject'}) {
        $query_params->{'_subject'} = $self->{api_client}->to_query_value($args{'_subject'});
    }

    # query params
    if ( exists $args{'_redirect_to'}) {
        $query_params->{'_redirectTo'} = $self->{api_client}->to_query_value($args{'_redirect_to'});
    }

    # query params
    if ( exists $args{'_email_address'}) {
        $query_params->{'_emailAddress'} = $self->{api_client}->to_query_value($args{'_email_address'});
    }

    # query params
    if ( exists $args{'_success_message'}) {
        $query_params->{'_successMessage'} = $self->{api_client}->to_query_value($args{'_success_message'});
    }

    # query params
    if ( exists $args{'_spam_check'}) {
        $query_params->{'_spamCheck'} = $self->{api_client}->to_query_value($args{'_spam_check'});
    }

    # query params
    if ( exists $args{'other_parameters'}) {
        $query_params->{'otherParameters'} = $self->{api_client}->to_query_value($args{'other_parameters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
