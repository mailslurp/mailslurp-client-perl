=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::CommonActionsControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_new_email_address
#
# Create new random inbox
# 
# @param boolean $allow_team_access allowTeamAccess (optional)
# @param string $description description (optional)
# @param string $email_address emailAddress (optional)
# @param DateTime $expires_at expiresAt (optional)
# @param int $expires_in expiresIn (optional)
# @param boolean $favourite favourite (optional)
# @param string $inbox_type inboxType (optional)
# @param string $name name (optional)
# @param ARRAY[string] $tags tags (optional)
# @param boolean $use_domain_pool useDomainPool (optional)
{
    my $params = {
    'allow_team_access' => {
        data_type => 'boolean',
        description => 'allowTeamAccess',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'description',
        required => '0',
    },
    'email_address' => {
        data_type => 'string',
        description => 'emailAddress',
        required => '0',
    },
    'expires_at' => {
        data_type => 'DateTime',
        description => 'expiresAt',
        required => '0',
    },
    'expires_in' => {
        data_type => 'int',
        description => 'expiresIn',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'favourite',
        required => '0',
    },
    'inbox_type' => {
        data_type => 'string',
        description => 'inboxType',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'name',
        required => '0',
    },
    'tags' => {
        data_type => 'ARRAY[string]',
        description => 'tags',
        required => '0',
    },
    'use_domain_pool' => {
        data_type => 'boolean',
        description => 'useDomainPool',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_email_address' } = { 
        summary => 'Create new random inbox',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub create_new_email_address {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/createInbox';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'allow_team_access'}) {
        $query_params->{'allowTeamAccess'} = $self->{api_client}->to_query_value($args{'allow_team_access'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    # query params
    if ( exists $args{'expires_at'}) {
        $query_params->{'expiresAt'} = $self->{api_client}->to_query_value($args{'expires_at'});
    }

    # query params
    if ( exists $args{'expires_in'}) {
        $query_params->{'expiresIn'} = $self->{api_client}->to_query_value($args{'expires_in'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # query params
    if ( exists $args{'inbox_type'}) {
        $query_params->{'inboxType'} = $self->{api_client}->to_query_value($args{'inbox_type'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'use_domain_pool'}) {
        $query_params->{'useDomainPool'} = $self->{api_client}->to_query_value($args{'use_domain_pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# create_new_email_address1
#
# Create new random inbox
# 
# @param boolean $allow_team_access allowTeamAccess (optional)
# @param string $description description (optional)
# @param string $email_address emailAddress (optional)
# @param DateTime $expires_at expiresAt (optional)
# @param int $expires_in expiresIn (optional)
# @param boolean $favourite favourite (optional)
# @param string $inbox_type inboxType (optional)
# @param string $name name (optional)
# @param ARRAY[string] $tags tags (optional)
# @param boolean $use_domain_pool useDomainPool (optional)
{
    my $params = {
    'allow_team_access' => {
        data_type => 'boolean',
        description => 'allowTeamAccess',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'description',
        required => '0',
    },
    'email_address' => {
        data_type => 'string',
        description => 'emailAddress',
        required => '0',
    },
    'expires_at' => {
        data_type => 'DateTime',
        description => 'expiresAt',
        required => '0',
    },
    'expires_in' => {
        data_type => 'int',
        description => 'expiresIn',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'favourite',
        required => '0',
    },
    'inbox_type' => {
        data_type => 'string',
        description => 'inboxType',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'name',
        required => '0',
    },
    'tags' => {
        data_type => 'ARRAY[string]',
        description => 'tags',
        required => '0',
    },
    'use_domain_pool' => {
        data_type => 'boolean',
        description => 'useDomainPool',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_email_address1' } = { 
        summary => 'Create new random inbox',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub create_new_email_address1 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/newEmailAddress';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'allow_team_access'}) {
        $query_params->{'allowTeamAccess'} = $self->{api_client}->to_query_value($args{'allow_team_access'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    # query params
    if ( exists $args{'expires_at'}) {
        $query_params->{'expiresAt'} = $self->{api_client}->to_query_value($args{'expires_at'});
    }

    # query params
    if ( exists $args{'expires_in'}) {
        $query_params->{'expiresIn'} = $self->{api_client}->to_query_value($args{'expires_in'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # query params
    if ( exists $args{'inbox_type'}) {
        $query_params->{'inboxType'} = $self->{api_client}->to_query_value($args{'inbox_type'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'use_domain_pool'}) {
        $query_params->{'useDomainPool'} = $self->{api_client}->to_query_value($args{'use_domain_pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# empty_inbox
#
# Delete all emails in an inbox
# 
# @param string $inbox_id inboxId (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'empty_inbox' } = { 
        summary => 'Delete all emails in an inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub empty_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling empty_inbox");
    }

    # parse inputs
    my $_resource_path = '/emptyInbox';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_email_simple
#
# Send an email
# 
# @param SimpleSendEmailOptions $email_options emailOptions (required)
{
    my $params = {
    'email_options' => {
        data_type => 'SimpleSendEmailOptions',
        description => 'emailOptions',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email_simple' } = { 
        summary => 'Send an email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_email_simple {
    my ($self, %args) = @_;

    # verify the required parameter 'email_options' is set
    unless (exists $args{'email_options'}) {
      croak("Missing the required parameter 'email_options' when calling send_email_simple");
    }

    # parse inputs
    my $_resource_path = '/sendEmail';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'email_options'}) {
        $_body_data = $args{'email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
