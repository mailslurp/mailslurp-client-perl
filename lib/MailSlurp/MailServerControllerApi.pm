=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::MailServerControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# describe_mail_server_domain
#
# Get DNS Mail Server records for a domain
# 
# @param DescribeDomainOptions $describe_domain_options  (required)
{
    my $params = {
    'describe_domain_options' => {
        data_type => 'DescribeDomainOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'describe_mail_server_domain' } = { 
        summary => 'Get DNS Mail Server records for a domain',
        params => $params,
        returns => 'DescribeMailServerDomainResult',
        };
}
# @return DescribeMailServerDomainResult
#
sub describe_mail_server_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'describe_domain_options' is set
    unless (exists $args{'describe_domain_options'}) {
      croak("Missing the required parameter 'describe_domain_options' when calling describe_mail_server_domain");
    }

    # parse inputs
    my $_resource_path = '/mail-server/describe/domain';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'describe_domain_options'}) {
        $_body_data = $args{'describe_domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DescribeMailServerDomainResult', $response);
    return $_response_object;
}

#
# get_dns_lookup
#
# Lookup DNS records for a domain
# 
# @param DNSLookupOptions $dns_lookup_options  (required)
{
    my $params = {
    'dns_lookup_options' => {
        data_type => 'DNSLookupOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dns_lookup' } = { 
        summary => 'Lookup DNS records for a domain',
        params => $params,
        returns => 'DNSLookupResults',
        };
}
# @return DNSLookupResults
#
sub get_dns_lookup {
    my ($self, %args) = @_;

    # verify the required parameter 'dns_lookup_options' is set
    unless (exists $args{'dns_lookup_options'}) {
      croak("Missing the required parameter 'dns_lookup_options' when calling get_dns_lookup");
    }

    # parse inputs
    my $_resource_path = '/mail-server/describe/dns-lookup';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'dns_lookup_options'}) {
        $_body_data = $args{'dns_lookup_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DNSLookupResults', $response);
    return $_response_object;
}

#
# get_dns_lookups
#
# Lookup DNS records for multiple domains
# 
# @param DNSLookupsOptions $dns_lookups_options  (required)
{
    my $params = {
    'dns_lookups_options' => {
        data_type => 'DNSLookupsOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dns_lookups' } = { 
        summary => 'Lookup DNS records for multiple domains',
        params => $params,
        returns => 'DNSLookupResults',
        };
}
# @return DNSLookupResults
#
sub get_dns_lookups {
    my ($self, %args) = @_;

    # verify the required parameter 'dns_lookups_options' is set
    unless (exists $args{'dns_lookups_options'}) {
      croak("Missing the required parameter 'dns_lookups_options' when calling get_dns_lookups");
    }

    # parse inputs
    my $_resource_path = '/mail-server/describe/dns-lookups';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'dns_lookups_options'}) {
        $_body_data = $args{'dns_lookups_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DNSLookupResults', $response);
    return $_response_object;
}

#
# get_ip_address
#
# Get IP address for a domain
# 
# @param string $name  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ip_address' } = { 
        summary => 'Get IP address for a domain',
        params => $params,
        returns => 'IPAddressResult',
        };
}
# @return IPAddressResult
#
sub get_ip_address {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_ip_address");
    }

    # parse inputs
    my $_resource_path = '/mail-server/describe/ip-address';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IPAddressResult', $response);
    return $_response_object;
}

#
# verify_email_address
#
# Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
# 
# @param VerifyEmailAddressOptions $verify_email_address_options  (required)
{
    my $params = {
    'verify_email_address_options' => {
        data_type => 'VerifyEmailAddressOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verify_email_address' } = { 
        summary => 'Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.',
        params => $params,
        returns => 'EmailVerificationResult',
        };
}
# @return EmailVerificationResult
#
sub verify_email_address {
    my ($self, %args) = @_;

    # verify the required parameter 'verify_email_address_options' is set
    unless (exists $args{'verify_email_address_options'}) {
      croak("Missing the required parameter 'verify_email_address_options' when calling verify_email_address");
    }

    # parse inputs
    my $_resource_path = '/mail-server/verify/email-address';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'verify_email_address_options'}) {
        $_body_data = $args{'verify_email_address_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailVerificationResult', $response);
    return $_response_object;
}

1;
