=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::ImapControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# imap_server_fetch
#
# Fetch message in an inbox
# 
# @param int $seq_num  (required)
# @param string $inbox_id Inbox ID to search (optional)
{
    my $params = {
    'seq_num' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to search',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_fetch' } = { 
        summary => 'Fetch message in an inbox',
        params => $params,
        returns => 'ImapServerFetchResult',
        };
}
# @return ImapServerFetchResult
#
sub imap_server_fetch {
    my ($self, %args) = @_;

    # verify the required parameter 'seq_num' is set
    unless (exists $args{'seq_num'}) {
      croak("Missing the required parameter 'seq_num' when calling imap_server_fetch");
    }

    # parse inputs
    my $_resource_path = '/imap/server/fetch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'seq_num'}) {
        $query_params->{'seqNum'} = $self->{api_client}->to_query_value($args{'seq_num'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerFetchResult', $response);
    return $_response_object;
}

#
# imap_server_get
#
# Get a message by email ID
# 
# @param string $email_id Email ID to get (required)
# @param string $inbox_id Inbox ID to search (optional)
{
    my $params = {
    'email_id' => {
        data_type => 'string',
        description => 'Email ID to get',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to search',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_get' } = { 
        summary => 'Get a message by email ID',
        params => $params,
        returns => 'ImapServerGetResult',
        };
}
# @return ImapServerGetResult
#
sub imap_server_get {
    my ($self, %args) = @_;

    # verify the required parameter 'email_id' is set
    unless (exists $args{'email_id'}) {
      croak("Missing the required parameter 'email_id' when calling imap_server_get");
    }

    # parse inputs
    my $_resource_path = '/imap/server/get';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email_id'}) {
        $query_params->{'emailId'} = $self->{api_client}->to_query_value($args{'email_id'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerGetResult', $response);
    return $_response_object;
}

#
# imap_server_list
#
# List messages in an inbox
# 
# @param ImapServerListOptions $imap_server_list_options  (required)
# @param string $inbox_id Inbox ID to list (optional)
{
    my $params = {
    'imap_server_list_options' => {
        data_type => 'ImapServerListOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to list',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_list' } = { 
        summary => 'List messages in an inbox',
        params => $params,
        returns => 'ImapServerListResult',
        };
}
# @return ImapServerListResult
#
sub imap_server_list {
    my ($self, %args) = @_;

    # verify the required parameter 'imap_server_list_options' is set
    unless (exists $args{'imap_server_list_options'}) {
      croak("Missing the required parameter 'imap_server_list_options' when calling imap_server_list");
    }

    # parse inputs
    my $_resource_path = '/imap/server/list';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'imap_server_list_options'}) {
        $_body_data = $args{'imap_server_list_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerListResult', $response);
    return $_response_object;
}

#
# imap_server_mailbox
#
# Create a new mailbox if possible
# 
# @param string $name Inbox email address to create (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Inbox email address to create',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_mailbox' } = { 
        summary => 'Create a new mailbox if possible',
        params => $params,
        returns => 'ImapServerMailboxResult',
        };
}
# @return ImapServerMailboxResult
#
sub imap_server_mailbox {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling imap_server_mailbox");
    }

    # parse inputs
    my $_resource_path = '/imap/server/mailbox';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerMailboxResult', $response);
    return $_response_object;
}

#
# imap_server_search
#
# Search messages in an inbox
# 
# @param ImapServerSearchOptions $imap_server_search_options  (required)
# @param string $inbox_id Inbox ID to search (optional)
{
    my $params = {
    'imap_server_search_options' => {
        data_type => 'ImapServerSearchOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to search',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_search' } = { 
        summary => 'Search messages in an inbox',
        params => $params,
        returns => 'ImapServerSearchResult',
        };
}
# @return ImapServerSearchResult
#
sub imap_server_search {
    my ($self, %args) = @_;

    # verify the required parameter 'imap_server_search_options' is set
    unless (exists $args{'imap_server_search_options'}) {
      croak("Missing the required parameter 'imap_server_search_options' when calling imap_server_search");
    }

    # parse inputs
    my $_resource_path = '/imap/server/search';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'imap_server_search_options'}) {
        $_body_data = $args{'imap_server_search_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerSearchResult', $response);
    return $_response_object;
}

#
# imap_server_status
#
# Get status for mailbox
# 
# @param ImapServerStatusOptions $imap_server_status_options  (required)
# @param string $inbox_id Inbox ID to list (optional)
{
    my $params = {
    'imap_server_status_options' => {
        data_type => 'ImapServerStatusOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox ID to list',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_status' } = { 
        summary => 'Get status for mailbox',
        params => $params,
        returns => 'ImapServerStatusResult',
        };
}
# @return ImapServerStatusResult
#
sub imap_server_status {
    my ($self, %args) = @_;

    # verify the required parameter 'imap_server_status_options' is set
    unless (exists $args{'imap_server_status_options'}) {
      croak("Missing the required parameter 'imap_server_status_options' when calling imap_server_status");
    }

    # parse inputs
    my $_resource_path = '/imap/server/status';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'imap_server_status_options'}) {
        $_body_data = $args{'imap_server_status_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImapServerStatusResult', $response);
    return $_response_object;
}

#
# imap_server_update_flags
#
# 
# 
# @param ImapUpdateFlagsOptions $imap_update_flags_options  (required)
# @param string $inbox_id  (optional)
{
    my $params = {
    'imap_update_flags_options' => {
        data_type => 'ImapUpdateFlagsOptions',
        description => '',
        required => '1',
    },
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'imap_server_update_flags' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub imap_server_update_flags {
    my ($self, %args) = @_;

    # verify the required parameter 'imap_update_flags_options' is set
    unless (exists $args{'imap_update_flags_options'}) {
      croak("Missing the required parameter 'imap_update_flags_options' when calling imap_server_update_flags");
    }

    # parse inputs
    my $_resource_path = '/imap/server/update-flags';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'imap_update_flags_options'}) {
        $_body_data = $args{'imap_update_flags_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
