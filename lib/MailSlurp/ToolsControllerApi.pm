=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::ToolsControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# generate_bimi_record
#
# Create a BIMI record policy
# 
# @param GenerateBimiRecordOptions $generate_bimi_record_options  (required)
{
    my $params = {
    'generate_bimi_record_options' => {
        data_type => 'GenerateBimiRecordOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_bimi_record' } = { 
        summary => 'Create a BIMI record policy',
        params => $params,
        returns => 'GenerateBimiRecordResults',
        };
}
# @return GenerateBimiRecordResults
#
sub generate_bimi_record {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_bimi_record_options' is set
    unless (exists $args{'generate_bimi_record_options'}) {
      croak("Missing the required parameter 'generate_bimi_record_options' when calling generate_bimi_record");
    }

    # parse inputs
    my $_resource_path = '/tools/generate-bimi-record';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'generate_bimi_record_options'}) {
        $_body_data = $args{'generate_bimi_record_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateBimiRecordResults', $response);
    return $_response_object;
}

#
# generate_dmarc_record
#
# Create a DMARC record policy
# 
# @param GenerateDmarcRecordOptions $generate_dmarc_record_options  (required)
{
    my $params = {
    'generate_dmarc_record_options' => {
        data_type => 'GenerateDmarcRecordOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_dmarc_record' } = { 
        summary => 'Create a DMARC record policy',
        params => $params,
        returns => 'GenerateDmarcRecordResults',
        };
}
# @return GenerateDmarcRecordResults
#
sub generate_dmarc_record {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_dmarc_record_options' is set
    unless (exists $args{'generate_dmarc_record_options'}) {
      croak("Missing the required parameter 'generate_dmarc_record_options' when calling generate_dmarc_record");
    }

    # parse inputs
    my $_resource_path = '/tools/generate-dmarc-record';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'generate_dmarc_record_options'}) {
        $_body_data = $args{'generate_dmarc_record_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateDmarcRecordResults', $response);
    return $_response_object;
}

#
# generate_mta_sts_record
#
# Create a TLS reporting record policy
# 
# @param GenerateMtaStsRecordOptions $generate_mta_sts_record_options  (required)
{
    my $params = {
    'generate_mta_sts_record_options' => {
        data_type => 'GenerateMtaStsRecordOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_mta_sts_record' } = { 
        summary => 'Create a TLS reporting record policy',
        params => $params,
        returns => 'GenerateMtaStsRecordResults',
        };
}
# @return GenerateMtaStsRecordResults
#
sub generate_mta_sts_record {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_mta_sts_record_options' is set
    unless (exists $args{'generate_mta_sts_record_options'}) {
      croak("Missing the required parameter 'generate_mta_sts_record_options' when calling generate_mta_sts_record");
    }

    # parse inputs
    my $_resource_path = '/tools/generate-mta-sts-record';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'generate_mta_sts_record_options'}) {
        $_body_data = $args{'generate_mta_sts_record_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateMtaStsRecordResults', $response);
    return $_response_object;
}

#
# generate_tls_reporting_record
#
# Create a TLS reporting record policy
# 
# @param GenerateTlsReportingRecordOptions $generate_tls_reporting_record_options  (required)
{
    my $params = {
    'generate_tls_reporting_record_options' => {
        data_type => 'GenerateTlsReportingRecordOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_tls_reporting_record' } = { 
        summary => 'Create a TLS reporting record policy',
        params => $params,
        returns => 'GenerateTlsReportingRecordResults',
        };
}
# @return GenerateTlsReportingRecordResults
#
sub generate_tls_reporting_record {
    my ($self, %args) = @_;

    # verify the required parameter 'generate_tls_reporting_record_options' is set
    unless (exists $args{'generate_tls_reporting_record_options'}) {
      croak("Missing the required parameter 'generate_tls_reporting_record_options' when calling generate_tls_reporting_record");
    }

    # parse inputs
    my $_resource_path = '/tools/generate-tls-reporting-record';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'generate_tls_reporting_record_options'}) {
        $_body_data = $args{'generate_tls_reporting_record_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateTlsReportingRecordResults', $response);
    return $_response_object;
}

#
# lookup_bimi_domain
#
# Lookup a BIMI record policy
# 
# @param LookupBimiDomainOptions $lookup_bimi_domain_options  (required)
{
    my $params = {
    'lookup_bimi_domain_options' => {
        data_type => 'LookupBimiDomainOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lookup_bimi_domain' } = { 
        summary => 'Lookup a BIMI record policy',
        params => $params,
        returns => 'LookupBimiDomainResults',
        };
}
# @return LookupBimiDomainResults
#
sub lookup_bimi_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'lookup_bimi_domain_options' is set
    unless (exists $args{'lookup_bimi_domain_options'}) {
      croak("Missing the required parameter 'lookup_bimi_domain_options' when calling lookup_bimi_domain");
    }

    # parse inputs
    my $_resource_path = '/tools/lookup-bimi-domain';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'lookup_bimi_domain_options'}) {
        $_body_data = $args{'lookup_bimi_domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LookupBimiDomainResults', $response);
    return $_response_object;
}

#
# lookup_dmarc_domain
#
# Lookup a DMARC record policy
# 
# @param LookupDmarcDomainOptions $lookup_dmarc_domain_options  (required)
{
    my $params = {
    'lookup_dmarc_domain_options' => {
        data_type => 'LookupDmarcDomainOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lookup_dmarc_domain' } = { 
        summary => 'Lookup a DMARC record policy',
        params => $params,
        returns => 'LookupDmarcDomainResults',
        };
}
# @return LookupDmarcDomainResults
#
sub lookup_dmarc_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'lookup_dmarc_domain_options' is set
    unless (exists $args{'lookup_dmarc_domain_options'}) {
      croak("Missing the required parameter 'lookup_dmarc_domain_options' when calling lookup_dmarc_domain");
    }

    # parse inputs
    my $_resource_path = '/tools/lookup-dmarc-domain';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'lookup_dmarc_domain_options'}) {
        $_body_data = $args{'lookup_dmarc_domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LookupDmarcDomainResults', $response);
    return $_response_object;
}

#
# lookup_mta_sts_domain
#
# Lookup a MTA-STS domain policy
# 
# @param LookupMtaStsDomainOptions $lookup_mta_sts_domain_options  (required)
{
    my $params = {
    'lookup_mta_sts_domain_options' => {
        data_type => 'LookupMtaStsDomainOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lookup_mta_sts_domain' } = { 
        summary => 'Lookup a MTA-STS domain policy',
        params => $params,
        returns => 'LookupMtaStsDomainResults',
        };
}
# @return LookupMtaStsDomainResults
#
sub lookup_mta_sts_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'lookup_mta_sts_domain_options' is set
    unless (exists $args{'lookup_mta_sts_domain_options'}) {
      croak("Missing the required parameter 'lookup_mta_sts_domain_options' when calling lookup_mta_sts_domain");
    }

    # parse inputs
    my $_resource_path = '/tools/lookup-mta-sts-domain';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'lookup_mta_sts_domain_options'}) {
        $_body_data = $args{'lookup_mta_sts_domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LookupMtaStsDomainResults', $response);
    return $_response_object;
}

#
# lookup_tls_reporting_domain
#
# Lookup a TLS reporting domain policy
# 
# @param LookupTlsReportingDomainOptions $lookup_tls_reporting_domain_options  (required)
{
    my $params = {
    'lookup_tls_reporting_domain_options' => {
        data_type => 'LookupTlsReportingDomainOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lookup_tls_reporting_domain' } = { 
        summary => 'Lookup a TLS reporting domain policy',
        params => $params,
        returns => 'LookupTlsReportingDomainResults',
        };
}
# @return LookupTlsReportingDomainResults
#
sub lookup_tls_reporting_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'lookup_tls_reporting_domain_options' is set
    unless (exists $args{'lookup_tls_reporting_domain_options'}) {
      croak("Missing the required parameter 'lookup_tls_reporting_domain_options' when calling lookup_tls_reporting_domain");
    }

    # parse inputs
    my $_resource_path = '/tools/lookup-tls-reporting-domain';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'lookup_tls_reporting_domain_options'}) {
        $_body_data = $args{'lookup_tls_reporting_domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LookupTlsReportingDomainResults', $response);
    return $_response_object;
}

1;
