=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::DomainControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_domain_wildcard_catch_all
#
# Add catch all wild card inbox to domain
# 
# @param string $id id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_domain_wildcard_catch_all' } = { 
        summary => 'Add catch all wild card inbox to domain',
        params => $params,
        returns => 'DomainDto',
        };
}
# @return DomainDto
#
sub add_domain_wildcard_catch_all {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling add_domain_wildcard_catch_all");
    }

    # parse inputs
    my $_resource_path = '/domains/{id}/wildcard';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDto', $response);
    return $_response_object;
}

#
# create_domain
#
# Create Domain
# 
# @param CreateDomainOptions $domain_options domainOptions (required)
{
    my $params = {
    'domain_options' => {
        data_type => 'CreateDomainOptions',
        description => 'domainOptions',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_domain' } = { 
        summary => 'Create Domain',
        params => $params,
        returns => 'DomainDto',
        };
}
# @return DomainDto
#
sub create_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'domain_options' is set
    unless (exists $args{'domain_options'}) {
      croak("Missing the required parameter 'domain_options' when calling create_domain");
    }

    # parse inputs
    my $_resource_path = '/domains';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'domain_options'}) {
        $_body_data = $args{'domain_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDto', $response);
    return $_response_object;
}

#
# delete_domain
#
# Delete a domain
# 
# @param string $id id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_domain' } = { 
        summary => 'Delete a domain',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub delete_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_domain");
    }

    # parse inputs
    my $_resource_path = '/domains/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_domain
#
# Get a domain
# 
# @param string $id id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_domain' } = { 
        summary => 'Get a domain',
        params => $params,
        returns => 'DomainDto',
        };
}
# @return DomainDto
#
sub get_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_domain");
    }

    # parse inputs
    my $_resource_path = '/domains/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDto', $response);
    return $_response_object;
}

#
# get_domains
#
# Get domains
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_domains' } = { 
        summary => 'Get domains',
        params => $params,
        returns => 'ARRAY[DomainPreview]',
        };
}
# @return ARRAY[DomainPreview]
#
sub get_domains {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/domains';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DomainPreview]', $response);
    return $_response_object;
}

#
# update_domain
#
# Update a domain
# 
# @param string $id id (required)
# @param UpdateDomainOptions $update_domain_dto updateDomainDto (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'id',
        required => '1',
    },
    'update_domain_dto' => {
        data_type => 'UpdateDomainOptions',
        description => 'updateDomainDto',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_domain' } = { 
        summary => 'Update a domain',
        params => $params,
        returns => 'DomainDto',
        };
}
# @return DomainDto
#
sub update_domain {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_domain");
    }

    # verify the required parameter 'update_domain_dto' is set
    unless (exists $args{'update_domain_dto'}) {
      croak("Missing the required parameter 'update_domain_dto' when calling update_domain");
    }

    # parse inputs
    my $_resource_path = '/domains/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_domain_dto'}) {
        $_body_data = $args{'update_domain_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDto', $response);
    return $_response_object;
}

1;
