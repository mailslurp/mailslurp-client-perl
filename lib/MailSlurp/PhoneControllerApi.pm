=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::PhoneControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_emergency_address
#
# Create an emergency address
# 
# @param CreateEmergencyAddressOptions $create_emergency_address_options  (required)
{
    my $params = {
    'create_emergency_address_options' => {
        data_type => 'CreateEmergencyAddressOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_emergency_address' } = { 
        summary => 'Create an emergency address',
        params => $params,
        returns => 'EmergencyAddress',
        };
}
# @return EmergencyAddress
#
sub create_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'create_emergency_address_options' is set
    unless (exists $args{'create_emergency_address_options'}) {
      croak("Missing the required parameter 'create_emergency_address_options' when calling create_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_emergency_address_options'}) {
        $_body_data = $args{'create_emergency_address_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmergencyAddress', $response);
    return $_response_object;
}

#
# delete_emergency_address
#
# Delete an emergency address
# 
# @param string $address_id  (required)
{
    my $params = {
    'address_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_emergency_address' } = { 
        summary => 'Delete an emergency address',
        params => $params,
        returns => 'EmptyResponseDto',
        };
}
# @return EmptyResponseDto
#
sub delete_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'address_id' is set
    unless (exists $args{'address_id'}) {
      croak("Missing the required parameter 'address_id' when calling delete_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses/{addressId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'address_id'}) {
        my $_base_variable = "{" . "addressId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'address_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyResponseDto', $response);
    return $_response_object;
}

#
# delete_phone_number
#
# Delete a phone number
# 
# @param string $phone_number_id  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_phone_number' } = { 
        summary => 'Delete a phone number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling delete_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_consent_status
#
# Get consent status
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_consent_status' } = { 
        summary => 'Get consent status',
        params => $params,
        returns => 'ConsentStatusDto',
        };
}
# @return ConsentStatusDto
#
sub get_consent_status {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/consent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConsentStatusDto', $response);
    return $_response_object;
}

#
# get_emergency_address
#
# Get an emergency address
# 
# @param string $address_id  (required)
{
    my $params = {
    'address_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_emergency_address' } = { 
        summary => 'Get an emergency address',
        params => $params,
        returns => 'EmergencyAddress',
        };
}
# @return EmergencyAddress
#
sub get_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'address_id' is set
    unless (exists $args{'address_id'}) {
      croak("Missing the required parameter 'address_id' when calling get_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses/{addressId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'address_id'}) {
        my $_base_variable = "{" . "addressId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'address_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmergencyAddress', $response);
    return $_response_object;
}

#
# get_emergency_addresses
#
# Get emergency addresses
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_emergency_addresses' } = { 
        summary => 'Get emergency addresses',
        params => $params,
        returns => 'ARRAY[EmergencyAddressDto]',
        };
}
# @return ARRAY[EmergencyAddressDto]
#
sub get_emergency_addresses {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EmergencyAddressDto]', $response);
    return $_response_object;
}

#
# get_phone_number
#
# Get a phone number by ID
# 
# @param string $phone_number_id  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_phone_number' } = { 
        summary => 'Get a phone number by ID',
        params => $params,
        returns => 'PhoneNumberDto',
        };
}
# @return PhoneNumberDto
#
sub get_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling get_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhoneNumberDto', $response);
    return $_response_object;
}

#
# get_phone_numbers
#
# Get phone numbers
# 
# @param string $phone_country Optional phone country (optional)
# @param int $page Optional page index for list pagination (optional, default to 0)
# @param int $size Optional page size for list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
# @param string $search Optional search filter (optional)
# @param ARRAY[string] $include Optional phoneIds to include in result (optional)
# @param boolean $favourite Optionally filter results for favourites only (optional, default to false)
{
    my $params = {
    'phone_country' => {
        data_type => 'string',
        description => 'Optional phone country',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index for list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size for list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'include' => {
        data_type => 'ARRAY[string]',
        description => 'Optional phoneIds to include in result',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'Optionally filter results for favourites only',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_phone_numbers' } = { 
        summary => 'Get phone numbers',
        params => $params,
        returns => 'PagePhoneNumberProjection',
        };
}
# @return PagePhoneNumberProjection
#
sub get_phone_numbers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/numbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'phone_country'}) {
        $query_params->{'phoneCountry'} = $self->{api_client}->to_query_value($args{'phone_country'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'include'}) {
        $query_params->{'include'} = $self->{api_client}->to_query_value($args{'include'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PagePhoneNumberProjection', $response);
    return $_response_object;
}

#
# get_phone_plans
#
# Get phone plans
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_phone_plans' } = { 
        summary => 'Get phone plans',
        params => $params,
        returns => 'ARRAY[PhonePlanDto]',
        };
}
# @return ARRAY[PhonePlanDto]
#
sub get_phone_plans {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/plans';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PhonePlanDto]', $response);
    return $_response_object;
}

#
# get_phone_plans_availability
#
# Get phone plans availability
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_phone_plans_availability' } = { 
        summary => 'Get phone plans availability',
        params => $params,
        returns => 'PhonePlanAvailability',
        };
}
# @return PhonePlanAvailability
#
sub get_phone_plans_availability {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/plans/availability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhonePlanAvailability', $response);
    return $_response_object;
}

#
# get_sent_sms_by_phone_number
#
# List sent TXT messages for a phone number
# 
# @param string $phone_number_id  (required)
# @param int $page Optional page index in SMS list pagination (optional, default to 0)
# @param int $size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Optional filter SMSs received after given date time (optional)
# @param DateTime $before Optional filter SMSs received before given date time (optional)
# @param string $search Optional search filter (optional)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in SMS list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter SMSs received after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter SMSs received before given date time',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sent_sms_by_phone_number' } = { 
        summary => 'List sent TXT messages for a phone number',
        params => $params,
        returns => 'PageSentSmsProjection',
        };
}
# @return PageSentSmsProjection
#
sub get_sent_sms_by_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling get_sent_sms_by_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/sms-sent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageSentSmsProjection', $response);
    return $_response_object;
}

#
# get_sms_by_phone_number
#
# List SMS messages for a phone number
# 
# @param string $phone_number_id  (required)
# @param int $page Optional page index in SMS list pagination (optional, default to 0)
# @param int $size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param boolean $unread_only Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
# @param DateTime $since Optional filter SMSs received after given date time (optional)
# @param DateTime $before Optional filter SMSs received before given date time (optional)
# @param string $search Optional search filter (optional)
# @param boolean $favourite Optionally filter results for favourites only (optional, default to false)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in SMS list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'unread_only' => {
        data_type => 'boolean',
        description => 'Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter SMSs received after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter SMSs received before given date time',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'Optionally filter results for favourites only',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sms_by_phone_number' } = { 
        summary => 'List SMS messages for a phone number',
        params => $params,
        returns => 'PageSmsProjection',
        };
}
# @return PageSmsProjection
#
sub get_sms_by_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling get_sms_by_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/sms';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'unread_only'}) {
        $query_params->{'unreadOnly'} = $self->{api_client}->to_query_value($args{'unread_only'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageSmsProjection', $response);
    return $_response_object;
}

#
# send_sms_from_phone_number
#
# Send TXT message from a phone number
# 
# @param string $phone_number_id  (required)
# @param SmsSendOptions $sms_send_options  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'sms_send_options' => {
        data_type => 'SmsSendOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_sms_from_phone_number' } = { 
        summary => 'Send TXT message from a phone number',
        params => $params,
        returns => 'SentSmsDto',
        };
}
# @return SentSmsDto
#
sub send_sms_from_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling send_sms_from_phone_number");
    }

    # verify the required parameter 'sms_send_options' is set
    unless (exists $args{'sms_send_options'}) {
      croak("Missing the required parameter 'sms_send_options' when calling send_sms_from_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/sms';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'sms_send_options'}) {
        $_body_data = $args{'sms_send_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SentSmsDto', $response);
    return $_response_object;
}

#
# set_consent_status
#
# Set consent status
# 
# @param boolean $agree  (required)
{
    my $params = {
    'agree' => {
        data_type => 'boolean',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_consent_status' } = { 
        summary => 'Set consent status',
        params => $params,
        returns => 'ConsentStatusDto',
        };
}
# @return ConsentStatusDto
#
sub set_consent_status {
    my ($self, %args) = @_;

    # verify the required parameter 'agree' is set
    unless (exists $args{'agree'}) {
      croak("Missing the required parameter 'agree' when calling set_consent_status");
    }

    # parse inputs
    my $_resource_path = '/phone/consent';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'agree'}) {
        $query_params->{'agree'} = $self->{api_client}->to_query_value($args{'agree'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConsentStatusDto', $response);
    return $_response_object;
}

#
# set_phone_favourited
#
# Set phone favourited state
# 
# @param string $phone_number_id ID of phone to set favourite state (required)
# @param SetPhoneFavouritedOptions $set_phone_favourited_options  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => 'ID of phone to set favourite state',
        required => '1',
    },
    'set_phone_favourited_options' => {
        data_type => 'SetPhoneFavouritedOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_phone_favourited' } = { 
        summary => 'Set phone favourited state',
        params => $params,
        returns => 'PhoneNumberDto',
        };
}
# @return PhoneNumberDto
#
sub set_phone_favourited {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling set_phone_favourited");
    }

    # verify the required parameter 'set_phone_favourited_options' is set
    unless (exists $args{'set_phone_favourited_options'}) {
      croak("Missing the required parameter 'set_phone_favourited_options' when calling set_phone_favourited");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/favourite';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_phone_favourited_options'}) {
        $_body_data = $args{'set_phone_favourited_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhoneNumberDto', $response);
    return $_response_object;
}

#
# test_phone_number_send_sms
#
# Test sending an SMS to a number
# 
# @param string $phone_number_id  (required)
# @param TestPhoneNumberOptions $test_phone_number_options  (required)
# @param string $x_test_id  (optional)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'test_phone_number_options' => {
        data_type => 'TestPhoneNumberOptions',
        description => '',
        required => '1',
    },
    'x_test_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_phone_number_send_sms' } = { 
        summary => 'Test sending an SMS to a number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub test_phone_number_send_sms {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling test_phone_number_send_sms");
    }

    # verify the required parameter 'test_phone_number_options' is set
    unless (exists $args{'test_phone_number_options'}) {
      croak("Missing the required parameter 'test_phone_number_options' when calling test_phone_number_send_sms");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_test_id'}) {
        $header_params->{'x-test-id'} = $self->{api_client}->to_header_value($args{'x_test_id'});
    }

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'test_phone_number_options'}) {
        $_body_data = $args{'test_phone_number_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_phone_number
#
# Update a phone number
# 
# @param string $phone_number_id ID of phone to set favourite state (required)
# @param UpdatePhoneNumberOptions $update_phone_number_options  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => 'ID of phone to set favourite state',
        required => '1',
    },
    'update_phone_number_options' => {
        data_type => 'UpdatePhoneNumberOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_phone_number' } = { 
        summary => 'Update a phone number',
        params => $params,
        returns => 'PhoneNumberDto',
        };
}
# @return PhoneNumberDto
#
sub update_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling update_phone_number");
    }

    # verify the required parameter 'update_phone_number_options' is set
    unless (exists $args{'update_phone_number_options'}) {
      croak("Missing the required parameter 'update_phone_number_options' when calling update_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_phone_number_options'}) {
        $_body_data = $args{'update_phone_number_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhoneNumberDto', $response);
    return $_response_object;
}

#
# validate_phone_number
#
# Verify validity of a phone number
# 
# @param ValidatePhoneNumberOptions $validate_phone_number_options  (required)
{
    my $params = {
    'validate_phone_number_options' => {
        data_type => 'ValidatePhoneNumberOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_phone_number' } = { 
        summary => 'Verify validity of a phone number',
        params => $params,
        returns => 'PhoneNumberValidationDto',
        };
}
# @return PhoneNumberValidationDto
#
sub validate_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'validate_phone_number_options' is set
    unless (exists $args{'validate_phone_number_options'}) {
      croak("Missing the required parameter 'validate_phone_number_options' when calling validate_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'validate_phone_number_options'}) {
        $_body_data = $args{'validate_phone_number_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhoneNumberValidationDto', $response);
    return $_response_object;
}

1;
