=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::PhoneControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_emergency_address
#
# 
# 
# @param CreateEmergencyAddressOptions $create_emergency_address_options  (required)
{
    my $params = {
    'create_emergency_address_options' => {
        data_type => 'CreateEmergencyAddressOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_emergency_address' } = { 
        summary => '',
        params => $params,
        returns => 'EmergencyAddress',
        };
}
# @return EmergencyAddress
#
sub create_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'create_emergency_address_options' is set
    unless (exists $args{'create_emergency_address_options'}) {
      croak("Missing the required parameter 'create_emergency_address_options' when calling create_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_emergency_address_options'}) {
        $_body_data = $args{'create_emergency_address_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmergencyAddress', $response);
    return $_response_object;
}

#
# delete_emergency_address
#
# 
# 
# @param string $address_id  (required)
{
    my $params = {
    'address_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_emergency_address' } = { 
        summary => '',
        params => $params,
        returns => 'EmptyResponseDto',
        };
}
# @return EmptyResponseDto
#
sub delete_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'address_id' is set
    unless (exists $args{'address_id'}) {
      croak("Missing the required parameter 'address_id' when calling delete_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses/{addressId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'address_id'}) {
        my $_base_variable = "{" . "addressId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'address_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmptyResponseDto', $response);
    return $_response_object;
}

#
# delete_phone_number
#
# 
# 
# @param string $phone_number_id  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_phone_number' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling delete_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_emergency_address
#
# 
# 
# @param string $address_id  (required)
{
    my $params = {
    'address_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_emergency_address' } = { 
        summary => '',
        params => $params,
        returns => 'EmergencyAddress',
        };
}
# @return EmergencyAddress
#
sub get_emergency_address {
    my ($self, %args) = @_;

    # verify the required parameter 'address_id' is set
    unless (exists $args{'address_id'}) {
      croak("Missing the required parameter 'address_id' when calling get_emergency_address");
    }

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses/{addressId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'address_id'}) {
        my $_base_variable = "{" . "addressId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'address_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmergencyAddress', $response);
    return $_response_object;
}

#
# get_emergency_addresses
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_emergency_addresses' } = { 
        summary => '',
        params => $params,
        returns => 'ARRAY[EmergencyAddressDto]',
        };
}
# @return ARRAY[EmergencyAddressDto]
#
sub get_emergency_addresses {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/emergency-addresses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EmergencyAddressDto]', $response);
    return $_response_object;
}

#
# get_phone_number
#
# 
# 
# @param string $phone_number_id  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_phone_number' } = { 
        summary => '',
        params => $params,
        returns => 'PhoneNumberDto',
        };
}
# @return PhoneNumberDto
#
sub get_phone_number {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling get_phone_number");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PhoneNumberDto', $response);
    return $_response_object;
}

#
# get_phone_numbers
#
# 
# 
# @param int $page Optional page index for list pagination (optional, default to 0)
# @param int $size Optional page size for list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index for list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size for list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_phone_numbers' } = { 
        summary => '',
        params => $params,
        returns => 'PagePhoneNumberProjection',
        };
}
# @return PagePhoneNumberProjection
#
sub get_phone_numbers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/numbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PagePhoneNumberProjection', $response);
    return $_response_object;
}

#
# get_phone_plans
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_phone_plans' } = { 
        summary => '',
        params => $params,
        returns => 'ARRAY[PhonePlanDto]',
        };
}
# @return ARRAY[PhonePlanDto]
#
sub get_phone_plans {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/phone/plans';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PhonePlanDto]', $response);
    return $_response_object;
}

#
# test_phone_number_send_sms
#
# 
# 
# @param string $phone_number_id  (required)
# @param TestPhoneNumberOptions $test_phone_number_options  (required)
{
    my $params = {
    'phone_number_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'test_phone_number_options' => {
        data_type => 'TestPhoneNumberOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_phone_number_send_sms' } = { 
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub test_phone_number_send_sms {
    my ($self, %args) = @_;

    # verify the required parameter 'phone_number_id' is set
    unless (exists $args{'phone_number_id'}) {
      croak("Missing the required parameter 'phone_number_id' when calling test_phone_number_send_sms");
    }

    # verify the required parameter 'test_phone_number_options' is set
    unless (exists $args{'test_phone_number_options'}) {
      croak("Missing the required parameter 'test_phone_number_options' when calling test_phone_number_send_sms");
    }

    # parse inputs
    my $_resource_path = '/phone/numbers/{phoneNumberId}/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone_number_id'}) {
        my $_base_variable = "{" . "phoneNumberId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone_number_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'test_phone_number_options'}) {
        $_body_data = $args{'test_phone_number_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
