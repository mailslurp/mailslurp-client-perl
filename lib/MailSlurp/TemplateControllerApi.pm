=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::TemplateControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_template
#
# Create a Template
# 
# @param CreateTemplateOptions $create_template_options  (required)
{
    my $params = {
    'create_template_options' => {
        data_type => 'CreateTemplateOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_template' } = { 
        summary => 'Create a Template',
        params => $params,
        returns => 'TemplateDto',
        };
}
# @return TemplateDto
#
sub create_template {
    my ($self, %args) = @_;

    # verify the required parameter 'create_template_options' is set
    unless (exists $args{'create_template_options'}) {
      croak("Missing the required parameter 'create_template_options' when calling create_template");
    }

    # parse inputs
    my $_resource_path = '/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_template_options'}) {
        $_body_data = $args{'create_template_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateDto', $response);
    return $_response_object;
}

#
# delete_template
#
# Delete email template
# 
# @param string $template_id Template ID (required)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_template' } = { 
        summary => 'Delete email template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_template {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling delete_template");
    }

    # parse inputs
    my $_resource_path = '/templates/{templateId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "templateId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_all_templates
#
# List templates
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_templates' } = { 
        summary => 'List templates',
        params => $params,
        returns => 'PageTemplateProjection',
        };
}
# @return PageTemplateProjection
#
sub get_all_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templates/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageTemplateProjection', $response);
    return $_response_object;
}

#
# get_template
#
# Get template
# 
# @param string $template_id Template ID (required)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_template' } = { 
        summary => 'Get template',
        params => $params,
        returns => 'TemplateDto',
        };
}
# @return TemplateDto
#
sub get_template {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling get_template");
    }

    # parse inputs
    my $_resource_path = '/templates/{templateId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "templateId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateDto', $response);
    return $_response_object;
}

#
# get_template_preview_html
#
# Get template preview HTML
# 
# @param string $template_id Template ID (required)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_template_preview_html' } = { 
        summary => 'Get template preview HTML',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_template_preview_html {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling get_template_preview_html");
    }

    # parse inputs
    my $_resource_path = '/templates/{templateId}/preview/html';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html;charset=utf-8', 'text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "templateId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_template_preview_json
#
# Get template preview Json
# 
# @param string $template_id Template ID (required)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_template_preview_json' } = { 
        summary => 'Get template preview Json',
        params => $params,
        returns => 'TemplatePreview',
        };
}
# @return TemplatePreview
#
sub get_template_preview_json {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling get_template_preview_json");
    }

    # parse inputs
    my $_resource_path = '/templates/{templateId}/preview/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "templateId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplatePreview', $response);
    return $_response_object;
}

#
# get_templates
#
# List templates
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_templates' } = { 
        summary => 'List templates',
        params => $params,
        returns => 'ARRAY[TemplateProjection]',
        };
}
# @return ARRAY[TemplateProjection]
#
sub get_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TemplateProjection]', $response);
    return $_response_object;
}

#
# update_template
#
# Update template
# 
# @param string $template_id Template ID (required)
# @param CreateTemplateOptions $create_template_options  (required)
{
    my $params = {
    'template_id' => {
        data_type => 'string',
        description => 'Template ID',
        required => '1',
    },
    'create_template_options' => {
        data_type => 'CreateTemplateOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_template' } = { 
        summary => 'Update template',
        params => $params,
        returns => 'TemplateDto',
        };
}
# @return TemplateDto
#
sub update_template {
    my ($self, %args) = @_;

    # verify the required parameter 'template_id' is set
    unless (exists $args{'template_id'}) {
      croak("Missing the required parameter 'template_id' when calling update_template");
    }

    # verify the required parameter 'create_template_options' is set
    unless (exists $args{'create_template_options'}) {
      croak("Missing the required parameter 'create_template_options' when calling update_template");
    }

    # parse inputs
    my $_resource_path = '/templates/{templateId}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'template_id'}) {
        my $_base_variable = "{" . "templateId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_template_options'}) {
        $_body_data = $args{'create_template_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateDto', $response);
    return $_response_object;
}

1;
