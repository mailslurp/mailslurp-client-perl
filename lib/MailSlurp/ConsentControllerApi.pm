=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::ConsentControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# check_sending_consent_for_email_address
#
# 
# 
# @param string $email_address Email address to check consent for (required)
{
    my $params = {
    'email_address' => {
        data_type => 'string',
        description => 'Email address to check consent for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_sending_consent_for_email_address' } = { 
        summary => '',
        params => $params,
        returns => 'OptInSendingConsentDto',
        };
}
# @return OptInSendingConsentDto
#
sub check_sending_consent_for_email_address {
    my ($self, %args) = @_;

    # verify the required parameter 'email_address' is set
    unless (exists $args{'email_address'}) {
      croak("Missing the required parameter 'email_address' when calling check_sending_consent_for_email_address");
    }

    # parse inputs
    my $_resource_path = '/consent/opt-in/sending-consent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptInSendingConsentDto', $response);
    return $_response_object;
}

#
# get_opt_in_identities
#
# 
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_opt_in_identities' } = { 
        summary => '',
        params => $params,
        returns => 'PageOptInIdentityProjection',
        };
}
# @return PageOptInIdentityProjection
#
sub get_opt_in_identities {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/consent/opt-in';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageOptInIdentityProjection', $response);
    return $_response_object;
}

#
# revoke_opt_in_consent_for_email_address
#
# 
# 
# @param string $email_address Email address to revoke consent for (required)
{
    my $params = {
    'email_address' => {
        data_type => 'string',
        description => 'Email address to revoke consent for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'revoke_opt_in_consent_for_email_address' } = { 
        summary => '',
        params => $params,
        returns => 'OptInSendingConsentDto',
        };
}
# @return OptInSendingConsentDto
#
sub revoke_opt_in_consent_for_email_address {
    my ($self, %args) = @_;

    # verify the required parameter 'email_address' is set
    unless (exists $args{'email_address'}) {
      croak("Missing the required parameter 'email_address' when calling revoke_opt_in_consent_for_email_address");
    }

    # parse inputs
    my $_resource_path = '/consent/opt-in';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptInSendingConsentDto', $response);
    return $_response_object;
}

#
# send_opt_in_consent_for_email_address
#
# Send a verification code to a user once they have explicitly submitted their email address
# 
# @param OptInConsentOptions $opt_in_consent_options  (required)
{
    my $params = {
    'opt_in_consent_options' => {
        data_type => 'OptInConsentOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_opt_in_consent_for_email_address' } = { 
        summary => 'Send a verification code to a user once they have explicitly submitted their email address',
        params => $params,
        returns => 'OptInConsentSendResult',
        };
}
# @return OptInConsentSendResult
#
sub send_opt_in_consent_for_email_address {
    my ($self, %args) = @_;

    # verify the required parameter 'opt_in_consent_options' is set
    unless (exists $args{'opt_in_consent_options'}) {
      croak("Missing the required parameter 'opt_in_consent_options' when calling send_opt_in_consent_for_email_address");
    }

    # parse inputs
    my $_resource_path = '/consent/opt-in/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'opt_in_consent_options'}) {
        $_body_data = $args{'opt_in_consent_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OptInConsentSendResult', $response);
    return $_response_object;
}

1;
