=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::InboxForwarderControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_new_inbox_forwarder
#
# Create an inbox forwarder
# 
# @param string $inbox_id Inbox id to attach forwarder to (required)
# @param CreateInboxForwarderOptions $create_inbox_forwarder_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Inbox id to attach forwarder to',
        required => '1',
    },
    'create_inbox_forwarder_options' => {
        data_type => 'CreateInboxForwarderOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_inbox_forwarder' } = { 
        summary => 'Create an inbox forwarder',
        params => $params,
        returns => 'InboxForwarderDto',
        };
}
# @return InboxForwarderDto
#
sub create_new_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling create_new_inbox_forwarder");
    }

    # verify the required parameter 'create_inbox_forwarder_options' is set
    unless (exists $args{'create_inbox_forwarder_options'}) {
      croak("Missing the required parameter 'create_inbox_forwarder_options' when calling create_new_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_forwarder_options'}) {
        $_body_data = $args{'create_inbox_forwarder_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderDto', $response);
    return $_response_object;
}

#
# delete_inbox_forwarder
#
# Delete an inbox forwarder
# 
# @param string $id ID of inbox forwarder (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox_forwarder' } = { 
        summary => 'Delete an inbox forwarder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbox_forwarders
#
# Delete inbox forwarders
# 
# @param string $inbox_id Optional inbox id to attach forwarder to (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to attach forwarder to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox_forwarders' } = { 
        summary => 'Delete inbox forwarders',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox_forwarders {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/forwarders';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_all_inbox_forwarder_events
#
# Get all inbox forwarder events
# 
# @param int $page Optional page index in inbox forwarder event list pagination (optional, default to 0)
# @param int $size Optional page size in inbox forwarder event list pagination (optional, default to 20)
# @param string $inbox_id Optional inbox ID to filter for (optional)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox forwarder event list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox forwarder event list pagination',
        required => '0',
    },
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox ID to filter for',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_inbox_forwarder_events' } = { 
        summary => 'Get all inbox forwarder events',
        params => $params,
        returns => 'PageInboxForwarderEvents',
        };
}
# @return PageInboxForwarderEvents
#
sub get_all_inbox_forwarder_events {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/forwarders/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxForwarderEvents', $response);
    return $_response_object;
}

#
# get_forwarder_event
#
# Get a forwarder event
# 
# @param string $event_id ID of inbox forwarder event (required)
{
    my $params = {
    'event_id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder event',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_forwarder_event' } = { 
        summary => 'Get a forwarder event',
        params => $params,
        returns => 'InboxForwarderEventDto',
        };
}
# @return InboxForwarderEventDto
#
sub get_forwarder_event {
    my ($self, %args) = @_;

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling get_forwarder_event");
    }

    # parse inputs
    my $_resource_path = '/forwarders/events/{eventId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "eventId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderEventDto', $response);
    return $_response_object;
}

#
# get_inbox_forwarder
#
# Get an inbox forwarder
# 
# @param string $id ID of inbox forwarder (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_forwarder' } = { 
        summary => 'Get an inbox forwarder',
        params => $params,
        returns => 'InboxForwarderDto',
        };
}
# @return InboxForwarderDto
#
sub get_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderDto', $response);
    return $_response_object;
}

#
# get_inbox_forwarder_event
#
# Get an inbox forwarder event
# 
# @param string $id ID of inbox forwarder (required)
# @param string $event_id ID of inbox forwarder event (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder event',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_forwarder_event' } = { 
        summary => 'Get an inbox forwarder event',
        params => $params,
        returns => 'InboxForwarderEventDto',
        };
}
# @return InboxForwarderEventDto
#
sub get_inbox_forwarder_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbox_forwarder_event");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling get_inbox_forwarder_event");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}/events/{eventId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "eventId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderEventDto', $response);
    return $_response_object;
}

#
# get_inbox_forwarder_events
#
# Get an inbox forwarder event list
# 
# @param string $id ID of inbox forwarder (required)
# @param int $page Optional page index in inbox forwarder event list pagination (optional, default to 0)
# @param int $size Optional page size in inbox forwarder event list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox forwarder event list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox forwarder event list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_forwarder_events' } = { 
        summary => 'Get an inbox forwarder event list',
        params => $params,
        returns => 'PageInboxForwarderEvents',
        };
}
# @return PageInboxForwarderEvents
#
sub get_inbox_forwarder_events {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbox_forwarder_events");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxForwarderEvents', $response);
    return $_response_object;
}

#
# get_inbox_forwarders
#
# List inbox forwarders
# 
# @param string $inbox_id Optional inbox id to get forwarders from (optional)
# @param int $page Optional page index in inbox forwarder list pagination (optional, default to 0)
# @param int $size Optional page size in inbox forwarder list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to get forwarders from',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox forwarder list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox forwarder list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_forwarders' } = { 
        summary => 'List inbox forwarders',
        params => $params,
        returns => 'PageInboxForwarderDto',
        };
}
# @return PageInboxForwarderDto
#
sub get_inbox_forwarders {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/forwarders';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxForwarderDto', $response);
    return $_response_object;
}

#
# test_inbox_forwarder
#
# Test an inbox forwarder
# 
# @param string $id ID of inbox forwarder (required)
# @param InboxForwarderTestOptions $inbox_forwarder_test_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    'inbox_forwarder_test_options' => {
        data_type => 'InboxForwarderTestOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_inbox_forwarder' } = { 
        summary => 'Test an inbox forwarder',
        params => $params,
        returns => 'InboxForwarderTestResult',
        };
}
# @return InboxForwarderTestResult
#
sub test_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling test_inbox_forwarder");
    }

    # verify the required parameter 'inbox_forwarder_test_options' is set
    unless (exists $args{'inbox_forwarder_test_options'}) {
      croak("Missing the required parameter 'inbox_forwarder_test_options' when calling test_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}/test';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'inbox_forwarder_test_options'}) {
        $_body_data = $args{'inbox_forwarder_test_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderTestResult', $response);
    return $_response_object;
}

#
# test_inbox_forwarders_for_inbox
#
# Test inbox forwarders for inbox
# 
# @param string $inbox_id ID of inbox (required)
# @param InboxForwarderTestOptions $inbox_forwarder_test_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'ID of inbox',
        required => '1',
    },
    'inbox_forwarder_test_options' => {
        data_type => 'InboxForwarderTestOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_inbox_forwarders_for_inbox' } = { 
        summary => 'Test inbox forwarders for inbox',
        params => $params,
        returns => 'InboxForwarderTestResult',
        };
}
# @return InboxForwarderTestResult
#
sub test_inbox_forwarders_for_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling test_inbox_forwarders_for_inbox");
    }

    # verify the required parameter 'inbox_forwarder_test_options' is set
    unless (exists $args{'inbox_forwarder_test_options'}) {
      croak("Missing the required parameter 'inbox_forwarder_test_options' when calling test_inbox_forwarders_for_inbox");
    }

    # parse inputs
    my $_resource_path = '/forwarders';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'inbox_forwarder_test_options'}) {
        $_body_data = $args{'inbox_forwarder_test_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderTestResult', $response);
    return $_response_object;
}

#
# test_new_inbox_forwarder
#
# Test new inbox forwarder
# 
# @param TestNewInboxForwarderOptions $test_new_inbox_forwarder_options  (required)
{
    my $params = {
    'test_new_inbox_forwarder_options' => {
        data_type => 'TestNewInboxForwarderOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_new_inbox_forwarder' } = { 
        summary => 'Test new inbox forwarder',
        params => $params,
        returns => 'InboxForwarderTestResult',
        };
}
# @return InboxForwarderTestResult
#
sub test_new_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'test_new_inbox_forwarder_options' is set
    unless (exists $args{'test_new_inbox_forwarder_options'}) {
      croak("Missing the required parameter 'test_new_inbox_forwarder_options' when calling test_new_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'test_new_inbox_forwarder_options'}) {
        $_body_data = $args{'test_new_inbox_forwarder_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderTestResult', $response);
    return $_response_object;
}

#
# update_inbox_forwarder
#
# Update an inbox forwarder
# 
# @param string $id ID of inbox forwarder (required)
# @param CreateInboxForwarderOptions $create_inbox_forwarder_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox forwarder',
        required => '1',
    },
    'create_inbox_forwarder_options' => {
        data_type => 'CreateInboxForwarderOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbox_forwarder' } = { 
        summary => 'Update an inbox forwarder',
        params => $params,
        returns => 'InboxForwarderDto',
        };
}
# @return InboxForwarderDto
#
sub update_inbox_forwarder {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_inbox_forwarder");
    }

    # verify the required parameter 'create_inbox_forwarder_options' is set
    unless (exists $args{'create_inbox_forwarder_options'}) {
      croak("Missing the required parameter 'create_inbox_forwarder_options' when calling update_inbox_forwarder");
    }

    # parse inputs
    my $_resource_path = '/forwarders/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_forwarder_options'}) {
        $_body_data = $args{'create_inbox_forwarder_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxForwarderDto', $response);
    return $_response_object;
}

1;
