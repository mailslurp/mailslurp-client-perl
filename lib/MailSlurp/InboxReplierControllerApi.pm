=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::InboxReplierControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_new_inbox_replier
#
# Create an inbox replier
# 
# @param CreateInboxReplierOptions $create_inbox_replier_options  (required)
{
    my $params = {
    'create_inbox_replier_options' => {
        data_type => 'CreateInboxReplierOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_inbox_replier' } = { 
        summary => 'Create an inbox replier',
        params => $params,
        returns => 'InboxReplierDto',
        };
}
# @return InboxReplierDto
#
sub create_new_inbox_replier {
    my ($self, %args) = @_;

    # verify the required parameter 'create_inbox_replier_options' is set
    unless (exists $args{'create_inbox_replier_options'}) {
      croak("Missing the required parameter 'create_inbox_replier_options' when calling create_new_inbox_replier");
    }

    # parse inputs
    my $_resource_path = '/repliers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_replier_options'}) {
        $_body_data = $args{'create_inbox_replier_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxReplierDto', $response);
    return $_response_object;
}

#
# delete_inbox_replier
#
# Delete an inbox replier
# 
# @param string $id ID of inbox replier (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox replier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox_replier' } = { 
        summary => 'Delete an inbox replier',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox_replier {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_inbox_replier");
    }

    # parse inputs
    my $_resource_path = '/repliers/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbox_repliers
#
# Delete inbox repliers
# 
# @param string $inbox_id Optional inbox id to attach replier to (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to attach replier to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox_repliers' } = { 
        summary => 'Delete inbox repliers',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox_repliers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/repliers';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_inbox_replier
#
# Get an inbox replier
# 
# @param string $id ID of inbox replier (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox replier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_replier' } = { 
        summary => 'Get an inbox replier',
        params => $params,
        returns => 'InboxReplierDto',
        };
}
# @return InboxReplierDto
#
sub get_inbox_replier {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbox_replier");
    }

    # parse inputs
    my $_resource_path = '/repliers/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxReplierDto', $response);
    return $_response_object;
}

#
# get_inbox_replier_events
#
# Get an inbox replier event list
# 
# @param string $id ID of inbox replier (required)
# @param int $page Optional page index in inbox replier event list pagination (optional, default to 0)
# @param int $size Optional page size in inbox replier event list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox replier',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox replier event list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox replier event list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_replier_events' } = { 
        summary => 'Get an inbox replier event list',
        params => $params,
        returns => 'PageInboxReplierEvents',
        };
}
# @return PageInboxReplierEvents
#
sub get_inbox_replier_events {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbox_replier_events");
    }

    # parse inputs
    my $_resource_path = '/repliers/{id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxReplierEvents', $response);
    return $_response_object;
}

#
# get_inbox_repliers
#
# List inbox repliers
# 
# @param string $inbox_id Optional inbox id to get repliers from (optional)
# @param int $page Optional page index in inbox replier list pagination (optional, default to 0)
# @param int $size Optional page size in inbox replier list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Filter by created at after the given timestamp (optional)
# @param DateTime $before Filter by created at before the given timestamp (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Optional inbox id to get repliers from',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox replier list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox replier list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Filter by created at after the given timestamp',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Filter by created at before the given timestamp',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_repliers' } = { 
        summary => 'List inbox repliers',
        params => $params,
        returns => 'PageInboxReplierDto',
        };
}
# @return PageInboxReplierDto
#
sub get_inbox_repliers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/repliers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox_id'}) {
        $query_params->{'inboxId'} = $self->{api_client}->to_query_value($args{'inbox_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxReplierDto', $response);
    return $_response_object;
}

#
# update_inbox_replier
#
# Update an inbox replier
# 
# @param string $id ID of inbox replier (required)
# @param UpdateInboxReplierOptions $update_inbox_replier_options  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of inbox replier',
        required => '1',
    },
    'update_inbox_replier_options' => {
        data_type => 'UpdateInboxReplierOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbox_replier' } = { 
        summary => 'Update an inbox replier',
        params => $params,
        returns => 'InboxReplierDto',
        };
}
# @return InboxReplierDto
#
sub update_inbox_replier {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_inbox_replier");
    }

    # verify the required parameter 'update_inbox_replier_options' is set
    unless (exists $args{'update_inbox_replier_options'}) {
      croak("Missing the required parameter 'update_inbox_replier_options' when calling update_inbox_replier");
    }

    # parse inputs
    my $_resource_path = '/repliers/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_inbox_replier_options'}) {
        $_body_data = $args{'update_inbox_replier_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxReplierDto', $response);
    return $_response_object;
}

1;
