=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::InboxControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_inbox
#
# Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
# 
# @param boolean $allow_team_access Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)
# @param string $description Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)
# @param string $email_address A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so &#x60;SMTP&#x60; inboxes will only work with &#x60;SMTP&#x60; type domains. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)
# @param DateTime $expires_at Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)
# @param int $expires_in Number of milliseconds that inbox should exist for (optional)
# @param boolean $favourite Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering (optional)
# @param string $inbox_type HTTP (default) or SMTP inbox type. HTTP inboxes are best for testing while SMTP inboxes are more reliable for public inbound email consumption. When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at &#x60;mx.mailslurp.com&#x60;. (optional)
# @param string $name Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails. (optional)
# @param ARRAY[string] $tags Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)
# @param boolean $use_domain_pool Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. Note this feature is only available for &#x60;HTTP&#x60; inbox types. (optional)
{
    my $params = {
    'allow_team_access' => {
        data_type => 'boolean',
        description => 'Grant team access to this inbox and the emails that belong to it for team members of your organization.',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with',
        required => '0',
    },
    'email_address' => {
        data_type => 'string',
        description => 'A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so &#x60;SMTP&#x60; inboxes will only work with &#x60;SMTP&#x60; type domains. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.',
        required => '0',
    },
    'expires_at' => {
        data_type => 'DateTime',
        description => 'Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX.',
        required => '0',
    },
    'expires_in' => {
        data_type => 'int',
        description => 'Number of milliseconds that inbox should exist for',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering',
        required => '0',
    },
    'inbox_type' => {
        data_type => 'string',
        description => 'HTTP (default) or SMTP inbox type. HTTP inboxes are best for testing while SMTP inboxes are more reliable for public inbound email consumption. When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at &#x60;mx.mailslurp.com&#x60;.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails.',
        required => '0',
    },
    'tags' => {
        data_type => 'ARRAY[string]',
        description => 'Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.',
        required => '0',
    },
    'use_domain_pool' => {
        data_type => 'boolean',
        description => 'Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. Note this feature is only available for &#x60;HTTP&#x60; inbox types.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_inbox' } = { 
        summary => 'Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub create_inbox {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'allow_team_access'}) {
        $query_params->{'allowTeamAccess'} = $self->{api_client}->to_query_value($args{'allow_team_access'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    # query params
    if ( exists $args{'expires_at'}) {
        $query_params->{'expiresAt'} = $self->{api_client}->to_query_value($args{'expires_at'});
    }

    # query params
    if ( exists $args{'expires_in'}) {
        $query_params->{'expiresIn'} = $self->{api_client}->to_query_value($args{'expires_in'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # query params
    if ( exists $args{'inbox_type'}) {
        $query_params->{'inboxType'} = $self->{api_client}->to_query_value($args{'inbox_type'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'use_domain_pool'}) {
        $query_params->{'useDomainPool'} = $self->{api_client}->to_query_value($args{'use_domain_pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# create_inbox_with_defaults
#
# Create an inbox with default options. Uses MailSlurp domain pool address and is private.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'create_inbox_with_defaults' } = { 
        summary => 'Create an inbox with default options. Uses MailSlurp domain pool address and is private.',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub create_inbox_with_defaults {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/withDefaults';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# create_inbox_with_options
#
# Create an inbox with options. Extended options for inbox creation.
# 
# @param CreateInboxDto $create_inbox_dto createInboxDto (required)
{
    my $params = {
    'create_inbox_dto' => {
        data_type => 'CreateInboxDto',
        description => 'createInboxDto',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_inbox_with_options' } = { 
        summary => 'Create an inbox with options. Extended options for inbox creation.',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub create_inbox_with_options {
    my ($self, %args) = @_;

    # verify the required parameter 'create_inbox_dto' is set
    unless (exists $args{'create_inbox_dto'}) {
      croak("Missing the required parameter 'create_inbox_dto' when calling create_inbox_with_options");
    }

    # parse inputs
    my $_resource_path = '/inboxes/withOptions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_dto'}) {
        $_body_data = $args{'create_inbox_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# delete_all_inboxes
#
# Delete all inboxes
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_inboxes' } = { 
        summary => 'Delete all inboxes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbox
#
# Delete inbox
# 
# @param string $inbox_id inboxId (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox' } = { 
        summary => 'Delete inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling delete_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_all_inboxes
#
# List All Inboxes Paginated
# 
# @param boolean $favourite Optionally filter results for favourites only (optional, default to false)
# @param int $page Optional page index in inbox list pagination (optional, default to 0)
# @param string $search Optionally filter by search words partial matching ID, tags, name, and email address (optional)
# @param int $size Optional page size in inbox list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $tag Optionally filter by tags. Will return inboxes that include given tags (optional)
# @param boolean $team_access Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)
{
    my $params = {
    'favourite' => {
        data_type => 'boolean',
        description => 'Optionally filter results for favourites only',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox list pagination',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optionally filter by search words partial matching ID, tags, name, and email address',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'tag' => {
        data_type => 'string',
        description => 'Optionally filter by tags. Will return inboxes that include given tags',
        required => '0',
    },
    'team_access' => {
        data_type => 'boolean',
        description => 'Optionally filter by team access. Defaults to false so organization inboxes are not included',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_inboxes' } = { 
        summary => 'List All Inboxes Paginated',
        params => $params,
        returns => 'PageInboxProjection',
        };
}
# @return PageInboxProjection
#
sub get_all_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'tag'}) {
        $query_params->{'tag'} = $self->{api_client}->to_query_value($args{'tag'});
    }

    # query params
    if ( exists $args{'team_access'}) {
        $query_params->{'teamAccess'} = $self->{api_client}->to_query_value($args{'team_access'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxProjection', $response);
    return $_response_object;
}

#
# get_emails
#
# Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
# 
# @param string $inbox_id Id of inbox that emails belongs to (required)
# @param int $limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
# @param int $min_count Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
# @param int $retry_timeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
# @param DateTime $since Exclude emails received before this ISO 8601 date time (optional)
# @param int $size Alias for limit. Assessed first before assessing any passed limit. (optional)
# @param string $sort Sort the results by received date and direction ASC or DESC (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Id of inbox that emails belongs to',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller',
        required => '0',
    },
    'min_count' => {
        data_type => 'int',
        description => 'Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.',
        required => '0',
    },
    'retry_timeout' => {
        data_type => 'int',
        description => 'Maximum milliseconds to spend retrying inbox database until minCount emails are returned',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Exclude emails received before this ISO 8601 date time',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Alias for limit. Assessed first before assessing any passed limit.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort the results by received date and direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_emails' } = { 
        summary => 'Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.',
        params => $params,
        returns => 'ARRAY[EmailPreview]',
        };
}
# @return ARRAY[EmailPreview]
#
sub get_emails {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_emails");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/emails';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'min_count'}) {
        $query_params->{'minCount'} = $self->{api_client}->to_query_value($args{'min_count'});
    }

    # query params
    if ( exists $args{'retry_timeout'}) {
        $query_params->{'retryTimeout'} = $self->{api_client}->to_query_value($args{'retry_timeout'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EmailPreview]', $response);
    return $_response_object;
}

#
# get_inbox
#
# Get Inbox. Returns properties of an inbox.
# 
# @param string $inbox_id inboxId (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox' } = { 
        summary => 'Get Inbox. Returns properties of an inbox.',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub get_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# get_inbox_emails_paginated
#
# Get inbox emails paginated
# 
# @param string $inbox_id Id of inbox that emails belongs to (required)
# @param int $page Optional page index in inbox emails list pagination (optional, default to 0)
# @param int $size Optional page size in inbox emails list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'Id of inbox that emails belongs to',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox emails list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox emails list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_emails_paginated' } = { 
        summary => 'Get inbox emails paginated',
        params => $params,
        returns => 'PageEmailPreview',
        };
}
# @return PageEmailPreview
#
sub get_inbox_emails_paginated {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox_emails_paginated");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/emails/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageEmailPreview', $response);
    return $_response_object;
}

#
# get_inbox_sent_emails
#
# Get Inbox Sent Emails
# 
# @param string $inbox_id inboxId (required)
# @param int $page Optional page index in inbox sent email list pagination (optional, default to 0)
# @param int $size Optional page size in inbox sent email list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox sent email list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox sent email list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_sent_emails' } = { 
        summary => 'Get Inbox Sent Emails',
        params => $params,
        returns => 'PageSentEmailProjection',
        };
}
# @return PageSentEmailProjection
#
sub get_inbox_sent_emails {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox_sent_emails");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/sent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageSentEmailProjection', $response);
    return $_response_object;
}

#
# get_inbox_tags
#
# Get inbox tags
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_tags' } = { 
        summary => 'Get inbox tags',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_inbox_tags {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/tags';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_inboxes
#
# List Inboxes and email eddresses
# 
# @param int $size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inboxes' } = { 
        summary => 'List Inboxes and email eddresses',
        params => $params,
        returns => 'ARRAY[Inbox]',
        };
}
# @return ARRAY[Inbox]
#
sub get_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Inbox]', $response);
    return $_response_object;
}

#
# get_organization_inboxes
#
# List Organization Inboxes Paginated
# 
# @param int $page Optional page index in inbox list pagination (optional, default to 0)
# @param int $size Optional page size in inbox list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_organization_inboxes' } = { 
        summary => 'List Organization Inboxes Paginated',
        params => $params,
        returns => 'PageOrganizationInboxProjection',
        };
}
# @return PageOrganizationInboxProjection
#
sub get_organization_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/organization';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageOrganizationInboxProjection', $response);
    return $_response_object;
}

#
# send_email
#
# Send Email
# 
# @param string $inbox_id ID of the inbox you want to send the email from (required)
# @param SendEmailOptions $send_email_options Options for the email (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'ID of the inbox you want to send the email from',
        required => '1',
    },
    'send_email_options' => {
        data_type => 'SendEmailOptions',
        description => 'Options for the email',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email' } = { 
        summary => 'Send Email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_email {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling send_email");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_email_options'}) {
        $_body_data = $args{'send_email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_email_and_confirm
#
# Send email and return sent confirmation
# 
# @param string $inbox_id ID of the inbox you want to send the email from (required)
# @param SendEmailOptions $send_email_options Options for the email (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'ID of the inbox you want to send the email from',
        required => '1',
    },
    'send_email_options' => {
        data_type => 'SendEmailOptions',
        description => 'Options for the email',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email_and_confirm' } = { 
        summary => 'Send email and return sent confirmation',
        params => $params,
        returns => 'SentEmailDto',
        };
}
# @return SentEmailDto
#
sub send_email_and_confirm {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling send_email_and_confirm");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/confirm';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_email_options'}) {
        $_body_data = $args{'send_email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SentEmailDto', $response);
    return $_response_object;
}

#
# send_test_email
#
# Send a test email to inbox
# 
# @param string $inbox_id inboxId (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_test_email' } = { 
        summary => 'Send a test email to inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_test_email {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling send_test_email");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/send-test-email';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_inbox_favourited
#
# Set inbox favourited state
# 
# @param string $inbox_id inboxId (required)
# @param SetInboxFavouritedOptions $set_inbox_favourited_options setInboxFavouritedOptions (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    'set_inbox_favourited_options' => {
        data_type => 'SetInboxFavouritedOptions',
        description => 'setInboxFavouritedOptions',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_inbox_favourited' } = { 
        summary => 'Set inbox favourited state',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub set_inbox_favourited {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling set_inbox_favourited");
    }

    # verify the required parameter 'set_inbox_favourited_options' is set
    unless (exists $args{'set_inbox_favourited_options'}) {
      croak("Missing the required parameter 'set_inbox_favourited_options' when calling set_inbox_favourited");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/favourite';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_inbox_favourited_options'}) {
        $_body_data = $args{'set_inbox_favourited_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

#
# update_inbox
#
# Update Inbox. Change name and description. Email address is not editable.
# 
# @param string $inbox_id inboxId (required)
# @param UpdateInboxOptions $update_inbox_options updateInboxOptions (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => 'inboxId',
        required => '1',
    },
    'update_inbox_options' => {
        data_type => 'UpdateInboxOptions',
        description => 'updateInboxOptions',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbox' } = { 
        summary => 'Update Inbox. Change name and description. Email address is not editable.',
        params => $params,
        returns => 'Inbox',
        };
}
# @return Inbox
#
sub update_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling update_inbox");
    }

    # verify the required parameter 'update_inbox_options' is set
    unless (exists $args{'update_inbox_options'}) {
      croak("Missing the required parameter 'update_inbox_options' when calling update_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_inbox_options'}) {
        $_body_data = $args{'update_inbox_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Inbox', $response);
    return $_response_object;
}

1;
