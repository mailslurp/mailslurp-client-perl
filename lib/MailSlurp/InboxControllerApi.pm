=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::InboxControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_inbox
#
# Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
# 
# @param string $a_custom_email_address_to_use_with_the_inbox/_defaults_to_null/_when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_&#x60;123@mailslurp/com&#x60;/_if_you_use_the_&#x60;use_domain_pool&#x60;_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_&#x60;123@mailslurp/info&#x60;_or_&#x60;123@mailslurp/biz&#x60;/_when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user/_if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain/_note_domain_types_must_match_the_inbox_type___so_&#x60;smtp&#x60;_inboxes_will_only_work_with_&#x60;smtp&#x60;_type_domains/_avoid_&#x60;smtp&#x60;_inboxes_if_you_need_to_send_emails_as_they_can_only_receive/_send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you/_to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id/  (optional)
# @param ARRAY[string] $tags_that_inbox_has_been_tagged_with/_tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account/_you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui/  (optional)
# @param string $optional_name_of_the_inbox/_displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails/  (optional)
# @param string $optional_description_of_the_inbox_for_labelling_purposes/_is_shown_in_the_dashboard_and_can_be_used_with  (optional)
# @param boolean $use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address/_defaults_to_null/_if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains/_this_is_useful_when_the_default_&#x60;@mailslurp/com&#x60;_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service/_when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_&#x60;@mailslurp/{world,info,xyz,///}&#x60;_/_this_means_a_tld_is_randomly_selecting_from_a_list_of_&#x60;/biz&#x60;,_&#x60;/info&#x60;,_&#x60;/xyz&#x60;_etc_to_add_variance_to_the_generated_email_addresses/_when_null_or_false_mail_slurp_uses_the_default_behavior_of_&#x60;@mailslurp/com&#x60;_or_custom_email_address_provided_by_the_email_address_field/_note_this_feature_is_only_available_for_&#x60;http&#x60;_inbox_types/  (optional)
# @param boolean $is_the_inbox_a_favorite/_marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering  (optional)
# @param DateTime $optional_inbox_expiration_date/_if_null_then_this_inbox_is_permanent_and_the_emails_in_it_won&#39;t_be_deleted/_if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached/_expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails/_an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded/_the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd&#39;t&#39;hh:mm:ss/sssxxx/  (optional)
# @param int $number_of_milliseconds_that_inbox_should_exist_for  (optional)
# @param boolean $deprecated_(team_access_is_always_true)/_grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization/  (optional)
# @param string $http_(default)_or_smtp_inbox_type/_http_inboxes_are_default_and_best_solution_for_most_cases/_smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption_(but_do_not_support_sending_emails)/_when_using_custom_domains_the_domain_type_must_match_the_inbox_type/_http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_&#x60;mx/mailslurp/com&#x60;/  (optional)
{
    my $params = {
    'a_custom_email_address_to_use_with_the_inbox/_defaults_to_null/_when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_&#x60;123@mailslurp/com&#x60;/_if_you_use_the_&#x60;use_domain_pool&#x60;_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_&#x60;123@mailslurp/info&#x60;_or_&#x60;123@mailslurp/biz&#x60;/_when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user/_if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain/_note_domain_types_must_match_the_inbox_type___so_&#x60;smtp&#x60;_inboxes_will_only_work_with_&#x60;smtp&#x60;_type_domains/_avoid_&#x60;smtp&#x60;_inboxes_if_you_need_to_send_emails_as_they_can_only_receive/_send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you/_to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id/' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tags_that_inbox_has_been_tagged_with/_tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account/_you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui/' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'optional_name_of_the_inbox/_displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails/' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'optional_description_of_the_inbox_for_labelling_purposes/_is_shown_in_the_dashboard_and_can_be_used_with' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address/_defaults_to_null/_if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains/_this_is_useful_when_the_default_&#x60;@mailslurp/com&#x60;_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service/_when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_&#x60;@mailslurp/{world,info,xyz,///}&#x60;_/_this_means_a_tld_is_randomly_selecting_from_a_list_of_&#x60;/biz&#x60;,_&#x60;/info&#x60;,_&#x60;/xyz&#x60;_etc_to_add_variance_to_the_generated_email_addresses/_when_null_or_false_mail_slurp_uses_the_default_behavior_of_&#x60;@mailslurp/com&#x60;_or_custom_email_address_provided_by_the_email_address_field/_note_this_feature_is_only_available_for_&#x60;http&#x60;_inbox_types/' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'is_the_inbox_a_favorite/_marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'optional_inbox_expiration_date/_if_null_then_this_inbox_is_permanent_and_the_emails_in_it_won&#39;t_be_deleted/_if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached/_expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails/_an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded/_the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd&#39;t&#39;hh:mm:ss/sssxxx/' => {
        data_type => 'DateTime',
        description => '',
        required => '0',
    },
    'number_of_milliseconds_that_inbox_should_exist_for' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'deprecated_(team_access_is_always_true)/_grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization/' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'http_(default)_or_smtp_inbox_type/_http_inboxes_are_default_and_best_solution_for_most_cases/_smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption_(but_do_not_support_sending_emails)/_when_using_custom_domains_the_domain_type_must_match_the_inbox_type/_http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_&#x60;mx/mailslurp/com&#x60;/' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_inbox' } = { 
        summary => 'Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub create_inbox {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'a_custom_email_address_to_use_with_the_inbox/_defaults_to_null/_when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_&#x60;123@mailslurp/com&#x60;/_if_you_use_the_&#x60;use_domain_pool&#x60;_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_&#x60;123@mailslurp/info&#x60;_or_&#x60;123@mailslurp/biz&#x60;/_when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user/_if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain/_note_domain_types_must_match_the_inbox_type___so_&#x60;smtp&#x60;_inboxes_will_only_work_with_&#x60;smtp&#x60;_type_domains/_avoid_&#x60;smtp&#x60;_inboxes_if_you_need_to_send_emails_as_they_can_only_receive/_send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you/_to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id/'}) {
        $query_params->{'A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so &#x60;SMTP&#x60; inboxes will only work with &#x60;SMTP&#x60; type domains. Avoid &#x60;SMTP&#x60; inboxes if you need to send emails as they can only receive. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.'} = $self->{api_client}->to_query_value($args{'a_custom_email_address_to_use_with_the_inbox/_defaults_to_null/_when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_&#x60;123@mailslurp/com&#x60;/_if_you_use_the_&#x60;use_domain_pool&#x60;_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_&#x60;123@mailslurp/info&#x60;_or_&#x60;123@mailslurp/biz&#x60;/_when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user/_if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain/_note_domain_types_must_match_the_inbox_type___so_&#x60;smtp&#x60;_inboxes_will_only_work_with_&#x60;smtp&#x60;_type_domains/_avoid_&#x60;smtp&#x60;_inboxes_if_you_need_to_send_emails_as_they_can_only_receive/_send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you/_to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id/'});
    }

    # query params
    if ( exists $args{'tags_that_inbox_has_been_tagged_with/_tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account/_you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui/'}) {
        $query_params->{'Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.'} = $self->{api_client}->to_query_value($args{'tags_that_inbox_has_been_tagged_with/_tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account/_you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui/'});
    }

    # query params
    if ( exists $args{'optional_name_of_the_inbox/_displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails/'}) {
        $query_params->{'Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails.'} = $self->{api_client}->to_query_value($args{'optional_name_of_the_inbox/_displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails/'});
    }

    # query params
    if ( exists $args{'optional_description_of_the_inbox_for_labelling_purposes/_is_shown_in_the_dashboard_and_can_be_used_with'}) {
        $query_params->{'Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with'} = $self->{api_client}->to_query_value($args{'optional_description_of_the_inbox_for_labelling_purposes/_is_shown_in_the_dashboard_and_can_be_used_with'});
    }

    # query params
    if ( exists $args{'use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address/_defaults_to_null/_if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains/_this_is_useful_when_the_default_&#x60;@mailslurp/com&#x60;_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service/_when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_&#x60;@mailslurp/{world,info,xyz,///}&#x60;_/_this_means_a_tld_is_randomly_selecting_from_a_list_of_&#x60;/biz&#x60;,_&#x60;/info&#x60;,_&#x60;/xyz&#x60;_etc_to_add_variance_to_the_generated_email_addresses/_when_null_or_false_mail_slurp_uses_the_default_behavior_of_&#x60;@mailslurp/com&#x60;_or_custom_email_address_provided_by_the_email_address_field/_note_this_feature_is_only_available_for_&#x60;http&#x60;_inbox_types/'}) {
        $query_params->{'Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. Note this feature is only available for &#x60;HTTP&#x60; inbox types.'} = $self->{api_client}->to_query_value($args{'use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address/_defaults_to_null/_if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains/_this_is_useful_when_the_default_&#x60;@mailslurp/com&#x60;_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service/_when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_&#x60;@mailslurp/{world,info,xyz,///}&#x60;_/_this_means_a_tld_is_randomly_selecting_from_a_list_of_&#x60;/biz&#x60;,_&#x60;/info&#x60;,_&#x60;/xyz&#x60;_etc_to_add_variance_to_the_generated_email_addresses/_when_null_or_false_mail_slurp_uses_the_default_behavior_of_&#x60;@mailslurp/com&#x60;_or_custom_email_address_provided_by_the_email_address_field/_note_this_feature_is_only_available_for_&#x60;http&#x60;_inbox_types/'});
    }

    # query params
    if ( exists $args{'is_the_inbox_a_favorite/_marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering'}) {
        $query_params->{'Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering'} = $self->{api_client}->to_query_value($args{'is_the_inbox_a_favorite/_marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering'});
    }

    # query params
    if ( exists $args{'optional_inbox_expiration_date/_if_null_then_this_inbox_is_permanent_and_the_emails_in_it_won&#39;t_be_deleted/_if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached/_expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails/_an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded/_the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd&#39;t&#39;hh:mm:ss/sssxxx/'}) {
        $query_params->{'Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX.'} = $self->{api_client}->to_query_value($args{'optional_inbox_expiration_date/_if_null_then_this_inbox_is_permanent_and_the_emails_in_it_won&#39;t_be_deleted/_if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached/_expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails/_an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded/_the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd&#39;t&#39;hh:mm:ss/sssxxx/'});
    }

    # query params
    if ( exists $args{'number_of_milliseconds_that_inbox_should_exist_for'}) {
        $query_params->{'Number of milliseconds that inbox should exist for'} = $self->{api_client}->to_query_value($args{'number_of_milliseconds_that_inbox_should_exist_for'});
    }

    # query params
    if ( exists $args{'deprecated_(team_access_is_always_true)/_grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization/'}) {
        $query_params->{'DEPRECATED (team access is always true). Grant team access to this inbox and the emails that belong to it for team members of your organization.'} = $self->{api_client}->to_query_value($args{'deprecated_(team_access_is_always_true)/_grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization/'});
    }

    # query params
    if ( exists $args{'http_(default)_or_smtp_inbox_type/_http_inboxes_are_default_and_best_solution_for_most_cases/_smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption_(but_do_not_support_sending_emails)/_when_using_custom_domains_the_domain_type_must_match_the_inbox_type/_http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_&#x60;mx/mailslurp/com&#x60;/'}) {
        $query_params->{'HTTP (default) or SMTP inbox type. HTTP inboxes are default and best solution for most cases. SMTP inboxes are more reliable for public inbound email consumption (but do not support sending emails). When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at &#x60;mx.mailslurp.com&#x60;.'} = $self->{api_client}->to_query_value($args{'http_(default)_or_smtp_inbox_type/_http_inboxes_are_default_and_best_solution_for_most_cases/_smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption_(but_do_not_support_sending_emails)/_when_using_custom_domains_the_domain_type_must_match_the_inbox_type/_http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_&#x60;mx/mailslurp/com&#x60;/'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

#
# create_inbox_ruleset
#
# Create an inbox ruleset
# 
# @param string $inbox_id  (required)
# @param CreateInboxRulesetOptions $create_inbox_ruleset_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'create_inbox_ruleset_options' => {
        data_type => 'CreateInboxRulesetOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_inbox_ruleset' } = { 
        summary => 'Create an inbox ruleset',
        params => $params,
        returns => 'InboxRulesetDto',
        };
}
# @return InboxRulesetDto
#
sub create_inbox_ruleset {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling create_inbox_ruleset");
    }

    # verify the required parameter 'create_inbox_ruleset_options' is set
    unless (exists $args{'create_inbox_ruleset_options'}) {
      croak("Missing the required parameter 'create_inbox_ruleset_options' when calling create_inbox_ruleset");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/rulesets';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_ruleset_options'}) {
        $_body_data = $args{'create_inbox_ruleset_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxRulesetDto', $response);
    return $_response_object;
}

#
# create_inbox_with_defaults
#
# Create an inbox with default options. Uses MailSlurp domain pool address and is private.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'create_inbox_with_defaults' } = { 
        summary => 'Create an inbox with default options. Uses MailSlurp domain pool address and is private.',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub create_inbox_with_defaults {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/withDefaults';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

#
# create_inbox_with_options
#
# Create an inbox with options. Extended options for inbox creation.
# 
# @param CreateInboxDto $create_inbox_dto  (required)
{
    my $params = {
    'create_inbox_dto' => {
        data_type => 'CreateInboxDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_inbox_with_options' } = { 
        summary => 'Create an inbox with options. Extended options for inbox creation.',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub create_inbox_with_options {
    my ($self, %args) = @_;

    # verify the required parameter 'create_inbox_dto' is set
    unless (exists $args{'create_inbox_dto'}) {
      croak("Missing the required parameter 'create_inbox_dto' when calling create_inbox_with_options");
    }

    # parse inputs
    my $_resource_path = '/inboxes/withOptions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_inbox_dto'}) {
        $_body_data = $args{'create_inbox_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

#
# delete_all_inboxes
#
# Delete all inboxes
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_inboxes' } = { 
        summary => 'Delete all inboxes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbox
#
# Delete inbox
# 
# @param string $inbox_id  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbox' } = { 
        summary => 'Delete inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling delete_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# does_inbox_exist
#
# Does inbox exist
# 
# @param string $email_address Email address (required)
{
    my $params = {
    'email_address' => {
        data_type => 'string',
        description => 'Email address',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'does_inbox_exist' } = { 
        summary => 'Does inbox exist',
        params => $params,
        returns => 'InboxExistsDto',
        };
}
# @return InboxExistsDto
#
sub does_inbox_exist {
    my ($self, %args) = @_;

    # verify the required parameter 'email_address' is set
    unless (exists $args{'email_address'}) {
      croak("Missing the required parameter 'email_address' when calling does_inbox_exist");
    }

    # parse inputs
    my $_resource_path = '/inboxes/exists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email_address'}) {
        $query_params->{'emailAddress'} = $self->{api_client}->to_query_value($args{'email_address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxExistsDto', $response);
    return $_response_object;
}

#
# flush_expired
#
# Remove expired inboxes
# 
# @param DateTime $before Optional expired at before flag to flush expired inboxes that have expired before the given time (optional)
{
    my $params = {
    'before' => {
        data_type => 'DateTime',
        description => 'Optional expired at before flag to flush expired inboxes that have expired before the given time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'flush_expired' } = { 
        summary => 'Remove expired inboxes',
        params => $params,
        returns => 'FlushExpiredInboxesResult',
        };
}
# @return FlushExpiredInboxesResult
#
sub flush_expired {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/expired';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FlushExpiredInboxesResult', $response);
    return $_response_object;
}

#
# get_all_inboxes
#
# List All Inboxes Paginated
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param boolean $favourite Optionally filter results for favourites only (optional, default to false)
# @param string $search Optionally filter by search words partial matching ID, tags, name, and email address (optional)
# @param string $tag Optionally filter by tags. Will return inboxes that include given tags (optional)
# @param boolean $deprecated/_optionally_filter_by_team_access/  (optional)
# @param DateTime $since Optional filter by created after given date time (optional)
# @param DateTime $before Optional filter by created before given date time (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'favourite' => {
        data_type => 'boolean',
        description => 'Optionally filter results for favourites only',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Optionally filter by search words partial matching ID, tags, name, and email address',
        required => '0',
    },
    'tag' => {
        data_type => 'string',
        description => 'Optionally filter by tags. Will return inboxes that include given tags',
        required => '0',
    },
    'deprecated/_optionally_filter_by_team_access/' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by created after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by created before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_inboxes' } = { 
        summary => 'List All Inboxes Paginated',
        params => $params,
        returns => 'PageInboxProjection',
        };
}
# @return PageInboxProjection
#
sub get_all_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'favourite'}) {
        $query_params->{'favourite'} = $self->{api_client}->to_query_value($args{'favourite'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'tag'}) {
        $query_params->{'tag'} = $self->{api_client}->to_query_value($args{'tag'});
    }

    # query params
    if ( exists $args{'deprecated/_optionally_filter_by_team_access/'}) {
        $query_params->{'DEPRECATED. Optionally filter by team access.'} = $self->{api_client}->to_query_value($args{'deprecated/_optionally_filter_by_team_access/'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxProjection', $response);
    return $_response_object;
}

#
# get_emails
#
# Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
# 
# @param string $id_of_inbox_that_emails_belongs_to  (required)
# @param int $alias_for_limit/_assessed_first_before_assessing_any_passed_limit/  (optional)
# @param int $limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
# @param string $sort_the_results_by_received_date_and_direction_asc_or_desc  (optional)
# @param int $retry_timeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
# @param int $delay_timeout  (optional)
# @param int $min_count Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
# @param boolean $unread_only  (optional)
# @param DateTime $exclude_emails_received_after_this_iso_8601_date_time  (optional)
# @param DateTime $exclude_emails_received_before_this_iso_8601_date_time  (optional)
{
    my $params = {
    'id_of_inbox_that_emails_belongs_to' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'alias_for_limit/_assessed_first_before_assessing_any_passed_limit/' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller',
        required => '0',
    },
    'sort_the_results_by_received_date_and_direction_asc_or_desc' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'retry_timeout' => {
        data_type => 'int',
        description => 'Maximum milliseconds to spend retrying inbox database until minCount emails are returned',
        required => '0',
    },
    'delay_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_count' => {
        data_type => 'int',
        description => 'Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.',
        required => '0',
    },
    'unread_only' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'exclude_emails_received_after_this_iso_8601_date_time' => {
        data_type => 'DateTime',
        description => '',
        required => '0',
    },
    'exclude_emails_received_before_this_iso_8601_date_time' => {
        data_type => 'DateTime',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_emails' } = { 
        summary => 'Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.',
        params => $params,
        returns => 'ARRAY[EmailPreview]',
        };
}
# @return ARRAY[EmailPreview]
#
sub get_emails {
    my ($self, %args) = @_;

    # verify the required parameter 'id_of_inbox_that_emails_belongs_to' is set
    unless (exists $args{'id_of_inbox_that_emails_belongs_to'}) {
      croak("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling get_emails");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/emails';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'alias_for_limit/_assessed_first_before_assessing_any_passed_limit/'}) {
        $query_params->{'Alias for limit. Assessed first before assessing any passed limit.'} = $self->{api_client}->to_query_value($args{'alias_for_limit/_assessed_first_before_assessing_any_passed_limit/'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'sort_the_results_by_received_date_and_direction_asc_or_desc'}) {
        $query_params->{'Sort the results by received date and direction ASC or DESC'} = $self->{api_client}->to_query_value($args{'sort_the_results_by_received_date_and_direction_asc_or_desc'});
    }

    # query params
    if ( exists $args{'retry_timeout'}) {
        $query_params->{'retryTimeout'} = $self->{api_client}->to_query_value($args{'retry_timeout'});
    }

    # query params
    if ( exists $args{'delay_timeout'}) {
        $query_params->{'delayTimeout'} = $self->{api_client}->to_query_value($args{'delay_timeout'});
    }

    # query params
    if ( exists $args{'min_count'}) {
        $query_params->{'minCount'} = $self->{api_client}->to_query_value($args{'min_count'});
    }

    # query params
    if ( exists $args{'unread_only'}) {
        $query_params->{'unreadOnly'} = $self->{api_client}->to_query_value($args{'unread_only'});
    }

    # query params
    if ( exists $args{'exclude_emails_received_after_this_iso_8601_date_time'}) {
        $query_params->{'Exclude emails received after this ISO 8601 date time'} = $self->{api_client}->to_query_value($args{'exclude_emails_received_after_this_iso_8601_date_time'});
    }

    # query params
    if ( exists $args{'exclude_emails_received_before_this_iso_8601_date_time'}) {
        $query_params->{'Exclude emails received before this ISO 8601 date time'} = $self->{api_client}->to_query_value($args{'exclude_emails_received_before_this_iso_8601_date_time'});
    }

    # path params
    if ( exists $args{'id_of_inbox_that_emails_belongs_to'}) {
        my $_base_variable = "{" . "Id of inbox that emails belongs to" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id_of_inbox_that_emails_belongs_to'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EmailPreview]', $response);
    return $_response_object;
}

#
# get_inbox
#
# Get Inbox. Returns properties of an inbox.
# 
# @param string $inbox_id  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox' } = { 
        summary => 'Get Inbox. Returns properties of an inbox.',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub get_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

#
# get_inbox_count
#
# Get total inbox count
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_count' } = { 
        summary => 'Get total inbox count',
        params => $params,
        returns => 'CountDto',
        };
}
# @return CountDto
#
sub get_inbox_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountDto', $response);
    return $_response_object;
}

#
# get_inbox_email_count
#
# Get email count in inbox
# 
# @param string $id_of_inbox_that_emails_belongs_to  (required)
{
    my $params = {
    'id_of_inbox_that_emails_belongs_to' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_email_count' } = { 
        summary => 'Get email count in inbox',
        params => $params,
        returns => 'CountDto',
        };
}
# @return CountDto
#
sub get_inbox_email_count {
    my ($self, %args) = @_;

    # verify the required parameter 'id_of_inbox_that_emails_belongs_to' is set
    unless (exists $args{'id_of_inbox_that_emails_belongs_to'}) {
      croak("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling get_inbox_email_count");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/emails/count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id_of_inbox_that_emails_belongs_to'}) {
        my $_base_variable = "{" . "Id of inbox that emails belongs to" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id_of_inbox_that_emails_belongs_to'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountDto', $response);
    return $_response_object;
}

#
# get_inbox_emails_paginated
#
# Get inbox emails paginated
# 
# @param string $id_of_inbox_that_emails_belongs_to  (required)
# @param int $page Optional page index in inbox emails list pagination (optional, default to 0)
# @param int $size Optional page size in inbox emails list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Optional filter by received after given date time (optional)
# @param DateTime $before Optional filter by received before given date time (optional)
{
    my $params = {
    'id_of_inbox_that_emails_belongs_to' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox emails list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox emails list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by received after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by received before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_emails_paginated' } = { 
        summary => 'Get inbox emails paginated',
        params => $params,
        returns => 'PageEmailPreview',
        };
}
# @return PageEmailPreview
#
sub get_inbox_emails_paginated {
    my ($self, %args) = @_;

    # verify the required parameter 'id_of_inbox_that_emails_belongs_to' is set
    unless (exists $args{'id_of_inbox_that_emails_belongs_to'}) {
      croak("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling get_inbox_emails_paginated");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/emails/paginated';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # path params
    if ( exists $args{'id_of_inbox_that_emails_belongs_to'}) {
        my $_base_variable = "{" . "Id of inbox that emails belongs to" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id_of_inbox_that_emails_belongs_to'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageEmailPreview', $response);
    return $_response_object;
}

#
# get_inbox_sent_emails
#
# Get Inbox Sent Emails
# 
# @param string $inbox_id  (required)
# @param int $page Optional page index in inbox sent email list pagination (optional, default to 0)
# @param int $optional_page_size_in_inbox_sent_email_list_pagination  (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional sent email search (optional)
# @param DateTime $since Optional filter by sent after given date time (optional)
# @param DateTime $before Optional filter by sent before given date time (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox sent email list pagination',
        required => '0',
    },
    'optional_page_size_in_inbox_sent_email_list_pagination' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional sent email search',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by sent after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by sent before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_sent_emails' } = { 
        summary => 'Get Inbox Sent Emails',
        params => $params,
        returns => 'PageSentEmailProjection',
        };
}
# @return PageSentEmailProjection
#
sub get_inbox_sent_emails {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling get_inbox_sent_emails");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/sent';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'optional_page_size_in_inbox_sent_email_list_pagination'}) {
        $query_params->{'Optional page size in inbox sent email list pagination'} = $self->{api_client}->to_query_value($args{'optional_page_size_in_inbox_sent_email_list_pagination'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageSentEmailProjection', $response);
    return $_response_object;
}

#
# get_inbox_tags
#
# Get inbox tags
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_inbox_tags' } = { 
        summary => 'Get inbox tags',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_inbox_tags {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/tags';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_inboxes
#
# List Inboxes and email addresses
# 
# @param int $size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param DateTime $since Optional filter by created after given date time (optional)
# @param DateTime $before Optional filter by created before given date time (optional)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by created after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by created before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inboxes' } = { 
        summary => 'List Inboxes and email addresses',
        params => $params,
        returns => 'ARRAY[InboxDto]',
        };
}
# @return ARRAY[InboxDto]
#
sub get_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InboxDto]', $response);
    return $_response_object;
}

#
# get_organization_inboxes
#
# List Organization Inboxes Paginated
# 
# @param int $page Optional page index in list pagination (optional, default to 0)
# @param int $size Optional page size in list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Optional filter by created after given date time (optional)
# @param DateTime $before Optional filter by created before given date time (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Optional page index in list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by created after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by created before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_organization_inboxes' } = { 
        summary => 'List Organization Inboxes Paginated',
        params => $params,
        returns => 'PageOrganizationInboxProjection',
        };
}
# @return PageOrganizationInboxProjection
#
sub get_organization_inboxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboxes/organization';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageOrganizationInboxProjection', $response);
    return $_response_object;
}

#
# list_inbox_rulesets
#
# List inbox rulesets
# 
# @param string $inbox_id  (required)
# @param int $page Optional page index in inbox ruleset list pagination (optional, default to 0)
# @param int $size Optional page size in inbox ruleset list pagination (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Optional filter by created after given date time (optional)
# @param DateTime $before Optional filter by created before given date time (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox ruleset list pagination',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'Optional page size in inbox ruleset list pagination',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by created after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by created before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_inbox_rulesets' } = { 
        summary => 'List inbox rulesets',
        params => $params,
        returns => 'PageInboxRulesetDto',
        };
}
# @return PageInboxRulesetDto
#
sub list_inbox_rulesets {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling list_inbox_rulesets");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/rulesets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageInboxRulesetDto', $response);
    return $_response_object;
}

#
# list_inbox_tracking_pixels
#
# List inbox tracking pixels
# 
# @param string $inbox_id  (required)
# @param int $page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
# @param int $optional_page_size_in_inbox_tracking_pixel_list_pagination  (optional, default to 20)
# @param string $sort Optional createdAt sort direction ASC or DESC (optional, default to 'ASC')
# @param string $search_filter Optional search filter (optional)
# @param DateTime $since Optional filter by created after given date time (optional)
# @param DateTime $before Optional filter by created before given date time (optional)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Optional page index in inbox tracking pixel list pagination',
        required => '0',
    },
    'optional_page_size_in_inbox_tracking_pixel_list_pagination' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Optional createdAt sort direction ASC or DESC',
        required => '0',
    },
    'search_filter' => {
        data_type => 'string',
        description => 'Optional search filter',
        required => '0',
    },
    'since' => {
        data_type => 'DateTime',
        description => 'Optional filter by created after given date time',
        required => '0',
    },
    'before' => {
        data_type => 'DateTime',
        description => 'Optional filter by created before given date time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_inbox_tracking_pixels' } = { 
        summary => 'List inbox tracking pixels',
        params => $params,
        returns => 'PageTrackingPixelProjection',
        };
}
# @return PageTrackingPixelProjection
#
sub list_inbox_tracking_pixels {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling list_inbox_tracking_pixels");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/tracking-pixels';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'optional_page_size_in_inbox_tracking_pixel_list_pagination'}) {
        $query_params->{'Optional page size in inbox tracking pixel list pagination'} = $self->{api_client}->to_query_value($args{'optional_page_size_in_inbox_tracking_pixel_list_pagination'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'search_filter'}) {
        $query_params->{'searchFilter'} = $self->{api_client}->to_query_value($args{'search_filter'});
    }

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    # query params
    if ( exists $args{'before'}) {
        $query_params->{'before'} = $self->{api_client}->to_query_value($args{'before'});
    }

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageTrackingPixelProjection', $response);
    return $_response_object;
}

#
# send_email
#
# Send Email
# 
# @param string $id_of_the_inbox_you_want_to_send_the_email_from  (required)
# @param SendEmailOptions $send_email_options  (required)
{
    my $params = {
    'id_of_the_inbox_you_want_to_send_the_email_from' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'send_email_options' => {
        data_type => 'SendEmailOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email' } = { 
        summary => 'Send Email',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_email {
    my ($self, %args) = @_;

    # verify the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' is set
    unless (exists $args{'id_of_the_inbox_you_want_to_send_the_email_from'}) {
      croak("Missing the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' when calling send_email");
    }

    # verify the required parameter 'send_email_options' is set
    unless (exists $args{'send_email_options'}) {
      croak("Missing the required parameter 'send_email_options' when calling send_email");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id_of_the_inbox_you_want_to_send_the_email_from'}) {
        my $_base_variable = "{" . "ID of the inbox you want to send the email from" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id_of_the_inbox_you_want_to_send_the_email_from'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_email_options'}) {
        $_body_data = $args{'send_email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_email_and_confirm
#
# Send email and return sent confirmation
# 
# @param string $id_of_the_inbox_you_want_to_send_the_email_from  (required)
# @param SendEmailOptions $send_email_options  (required)
{
    my $params = {
    'id_of_the_inbox_you_want_to_send_the_email_from' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'send_email_options' => {
        data_type => 'SendEmailOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_email_and_confirm' } = { 
        summary => 'Send email and return sent confirmation',
        params => $params,
        returns => 'SentEmailDto',
        };
}
# @return SentEmailDto
#
sub send_email_and_confirm {
    my ($self, %args) = @_;

    # verify the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' is set
    unless (exists $args{'id_of_the_inbox_you_want_to_send_the_email_from'}) {
      croak("Missing the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' when calling send_email_and_confirm");
    }

    # verify the required parameter 'send_email_options' is set
    unless (exists $args{'send_email_options'}) {
      croak("Missing the required parameter 'send_email_options' when calling send_email_and_confirm");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/confirm';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id_of_the_inbox_you_want_to_send_the_email_from'}) {
        my $_base_variable = "{" . "ID of the inbox you want to send the email from" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id_of_the_inbox_you_want_to_send_the_email_from'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_email_options'}) {
        $_body_data = $args{'send_email_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SentEmailDto', $response);
    return $_response_object;
}

#
# send_test_email
#
# Send a test email to inbox
# 
# @param string $inbox_id  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_test_email' } = { 
        summary => 'Send a test email to inbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_test_email {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling send_test_email");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/send-test-email';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_inbox_favourited
#
# Set inbox favourited state
# 
# @param string $inbox_id  (required)
# @param SetInboxFavouritedOptions $set_inbox_favourited_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'set_inbox_favourited_options' => {
        data_type => 'SetInboxFavouritedOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_inbox_favourited' } = { 
        summary => 'Set inbox favourited state',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub set_inbox_favourited {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling set_inbox_favourited");
    }

    # verify the required parameter 'set_inbox_favourited_options' is set
    unless (exists $args{'set_inbox_favourited_options'}) {
      croak("Missing the required parameter 'set_inbox_favourited_options' when calling set_inbox_favourited");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}/favourite';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_inbox_favourited_options'}) {
        $_body_data = $args{'set_inbox_favourited_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

#
# update_inbox
#
# Update Inbox. Change name and description. Email address is not editable.
# 
# @param string $inbox_id  (required)
# @param UpdateInboxOptions $update_inbox_options  (required)
{
    my $params = {
    'inbox_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'update_inbox_options' => {
        data_type => 'UpdateInboxOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbox' } = { 
        summary => 'Update Inbox. Change name and description. Email address is not editable.',
        params => $params,
        returns => 'InboxDto',
        };
}
# @return InboxDto
#
sub update_inbox {
    my ($self, %args) = @_;

    # verify the required parameter 'inbox_id' is set
    unless (exists $args{'inbox_id'}) {
      croak("Missing the required parameter 'inbox_id' when calling update_inbox");
    }

    # verify the required parameter 'update_inbox_options' is set
    unless (exists $args{'update_inbox_options'}) {
      croak("Missing the required parameter 'update_inbox_options' when calling update_inbox");
    }

    # parse inputs
    my $_resource_path = '/inboxes/{inboxId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'inbox_id'}) {
        my $_base_variable = "{" . "inboxId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inbox_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_inbox_options'}) {
        $_body_data = $args{'update_inbox_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboxDto', $response);
    return $_response_object;
}

1;
