=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package MailSlurp::ApiInternalControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MailSlurp::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'MailSlurp::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = MailSlurp::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_saml_user_or_create
#
# 
# 
# @param string $key  (required)
# @param GetOrCreateSamlUserOptions $get_or_create_saml_user_options  (required)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'get_or_create_saml_user_options' => {
        data_type => 'GetOrCreateSamlUserOptions',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_saml_user_or_create' } = { 
        summary => '',
        params => $params,
        returns => 'UserDto',
        };
}
# @return UserDto
#
sub get_saml_user_or_create {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling get_saml_user_or_create");
    }

    # verify the required parameter 'get_or_create_saml_user_options' is set
    unless (exists $args{'get_or_create_saml_user_options'}) {
      croak("Missing the required parameter 'get_or_create_saml_user_options' when calling get_saml_user_or_create");
    }

    # parse inputs
    my $_resource_path = '/internal/saml/user';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_or_create_saml_user_options'}) {
        $_body_data = $args{'get_or_create_saml_user_options'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(API_KEY )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserDto', $response);
    return $_response_object;
}

1;
