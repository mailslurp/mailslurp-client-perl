=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('MailSlurp::GroupControllerApi');

my $api = MailSlurp::GroupControllerApi->new();
isa_ok($api, 'MailSlurp::GroupControllerApi');

#
# add_contacts_to_group test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $update_group_contacts_option = undef; # replace NULL with a proper value
    my $result = $api->add_contacts_to_group(group_id => $group_id, update_group_contacts_option => $update_group_contacts_option);
}

#
# create_group test
#
{
    my $create_group_options = undef; # replace NULL with a proper value
    my $result = $api->create_group(create_group_options => $create_group_options);
}

#
# delete_group test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $result = $api->delete_group(group_id => $group_id);
}

#
# get_all_groups test
#
{
    my $page = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_all_groups(page => $page, size => $size, sort => $sort);
}

#
# get_group test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $result = $api->get_group(group_id => $group_id);
}

#
# get_group_with_contacts test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $result = $api->get_group_with_contacts(group_id => $group_id);
}

#
# get_group_with_contacts_paginated test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_group_with_contacts_paginated(group_id => $group_id, page => $page, size => $size, sort => $sort);
}

#
# get_groups test
#
{
    my $result = $api->get_groups();
}

#
# remove_contacts_from_group test
#
{
    my $group_id = undef; # replace NULL with a proper value
    my $update_group_contacts_option = undef; # replace NULL with a proper value
    my $result = $api->remove_contacts_from_group(group_id => $group_id, update_group_contacts_option => $update_group_contacts_option);
}


1;
