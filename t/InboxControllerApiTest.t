=begin comment

MailSlurp API

MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('MailSlurp::InboxControllerApi');

my $api = MailSlurp::InboxControllerApi->new();
isa_ok($api, 'MailSlurp::InboxControllerApi');

#
# create_inbox test
#
{
    my $allow_team_access = undef; # replace NULL with a proper value
    my $description = undef; # replace NULL with a proper value
    my $email_address = undef; # replace NULL with a proper value
    my $expires_at = undef; # replace NULL with a proper value
    my $expires_in = undef; # replace NULL with a proper value
    my $favourite = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $tags = undef; # replace NULL with a proper value
    my $use_domain_pool = undef; # replace NULL with a proper value
    my $result = $api->create_inbox(allow_team_access => $allow_team_access, description => $description, email_address => $email_address, expires_at => $expires_at, expires_in => $expires_in, favourite => $favourite, name => $name, tags => $tags, use_domain_pool => $use_domain_pool);
}

#
# create_inbox_with_options test
#
{
    my $create_inbox_dto = undef; # replace NULL with a proper value
    my $result = $api->create_inbox_with_options(create_inbox_dto => $create_inbox_dto);
}

#
# delete_all_inboxes test
#
{
    my $result = $api->delete_all_inboxes();
}

#
# delete_inbox test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $result = $api->delete_inbox(inbox_id => $inbox_id);
}

#
# get_all_inboxes test
#
{
    my $favourite = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $search = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $tag = undef; # replace NULL with a proper value
    my $team_access = undef; # replace NULL with a proper value
    my $result = $api->get_all_inboxes(favourite => $favourite, page => $page, search => $search, size => $size, sort => $sort, tag => $tag, team_access => $team_access);
}

#
# get_emails test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $limit = undef; # replace NULL with a proper value
    my $min_count = undef; # replace NULL with a proper value
    my $retry_timeout = undef; # replace NULL with a proper value
    my $since = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_emails(inbox_id => $inbox_id, limit => $limit, min_count => $min_count, retry_timeout => $retry_timeout, since => $since, size => $size, sort => $sort);
}

#
# get_inbox test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $result = $api->get_inbox(inbox_id => $inbox_id);
}

#
# get_inbox_emails_paginated test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_inbox_emails_paginated(inbox_id => $inbox_id, page => $page, size => $size, sort => $sort);
}

#
# get_inbox_sent_emails test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_inbox_sent_emails(inbox_id => $inbox_id, page => $page, size => $size, sort => $sort);
}

#
# get_inbox_tags test
#
{
    my $result = $api->get_inbox_tags();
}

#
# get_inboxes test
#
{
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_inboxes(size => $size, sort => $sort);
}

#
# get_organization_inboxes test
#
{
    my $page = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $sort = undef; # replace NULL with a proper value
    my $result = $api->get_organization_inboxes(page => $page, size => $size, sort => $sort);
}

#
# send_email test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $send_email_options = undef; # replace NULL with a proper value
    my $result = $api->send_email(inbox_id => $inbox_id, send_email_options => $send_email_options);
}

#
# send_email_and_confirm test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $send_email_options = undef; # replace NULL with a proper value
    my $result = $api->send_email_and_confirm(inbox_id => $inbox_id, send_email_options => $send_email_options);
}

#
# set_inbox_favourited test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $set_inbox_favourited_options = undef; # replace NULL with a proper value
    my $result = $api->set_inbox_favourited(inbox_id => $inbox_id, set_inbox_favourited_options => $set_inbox_favourited_options);
}

#
# update_inbox test
#
{
    my $inbox_id = undef; # replace NULL with a proper value
    my $update_inbox_options = undef; # replace NULL with a proper value
    my $result = $api->update_inbox(inbox_id => $inbox_id, update_inbox_options => $update_inbox_options);
}


1;
